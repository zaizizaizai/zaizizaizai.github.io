<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zaizizaizai</title>
  
  <subtitle>a dream of a child</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zaizizaizai.github.io/"/>
  <updated>2017-11-27T04:32:50.650Z</updated>
  <id>https://zaizizaizai.github.io/</id>
  
  <author>
    <name>pinocchio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>电梯模拟程序</title>
    <link href="https://zaizizaizai.github.io/2017/11/27/%E7%94%B5%E6%A2%AF%E6%A8%A1%E6%8B%9F%E7%A8%8B%E5%BA%8F/"/>
    <id>https://zaizizaizai.github.io/2017/11/27/电梯模拟程序/</id>
    <published>2017-11-27T03:38:23.000Z</published>
    <updated>2017-11-27T04:32:50.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="whim"><a href="#whim" class="headerlink" title="whim"></a>whim</h1><p>今天在等电梯的时候，突然对电梯工作流程感兴趣，想写个电梯模拟小程序。<br>先来占个坑，写个大致思路,等考完试再来完成</p><p>//这楼有20层<br><code>int max_floor = 20;</code></p><h2 id="楼层构造一个类"><a href="#楼层构造一个类" class="headerlink" title="楼层构造一个类"></a>楼层构造一个类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//楼层</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">floor</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="comment">//楼层</span></span><br><span class="line">      <span class="keyword">int</span> <span class="built_in">floor</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//有人上1，还是下2,或是没人按电梯0</span></span><br><span class="line">      <span class="keyword">int</span> uds = <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="电梯构造一个类"><a href="#电梯构造一个类" class="headerlink" title="电梯构造一个类"></a>电梯构造一个类</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//电梯</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">elevator</span> &#123;</span></span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">int</span> current_floor = <span class="number">0</span>;</span><br><span class="line">      <span class="comment">//三个状态，上升1，下降2，静止0</span></span><br><span class="line">      <span class="keyword">int</span> uds = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">//上升</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="comment">//下降</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">()</span></span>;   </span><br><span class="line">      <span class="comment">//判断电梯上升还是下降</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">UpDown</span><span class="params">()</span></span>;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="判断函数构造一个类"><a href="#判断函数构造一个类" class="headerlink" title="判断函数构造一个类"></a>判断函数构造一个类</h2><p>因为有两个电梯，所以把判断函数拿出来单独构造一个类。<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断电梯哪个电梯去载人，上升还是下降</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">select</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="comment">//判断哪个电梯去载人</span></span><br><span class="line">      <span class="keyword">void</span> which（）；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数部分"><a href="#函数部分" class="headerlink" title="函数部分"></a>函数部分</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> elevator::up()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//用参数判断是否到达</span></span><br><span class="line">   <span class="keyword">int</span> arrived = <span class="number">0</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)&#123;</span><br><span class="line">      <span class="comment">//判断是否到达目的楼层(类之间引用问题)</span></span><br><span class="line">      <span class="keyword">if</span>(current_floor != <span class="built_in">floor</span>.<span class="built_in">floor</span>)&#123;</span><br><span class="line">          current_floor++;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         arrived = <span class="number">1</span>;</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">return</span> arrived;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致思路就先写到这，后续加上。</p><p>真的蛮好玩诶！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;whim&quot;&gt;&lt;a href=&quot;#whim&quot; class=&quot;headerlink&quot; title=&quot;whim&quot;&gt;&lt;/a&gt;whim&lt;/h1&gt;&lt;p&gt;今天在等电梯的时候，突然对电梯工作流程感兴趣，想写个电梯模拟小程序。&lt;br&gt;先来占个坑，写个大致思路,等考完试再来完成&lt;/p
      
    
    </summary>
    
      <category term="whim" scheme="https://zaizizaizai.github.io/categories/whim/"/>
    
    
      <category term="项目" scheme="https://zaizizaizai.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="whim" scheme="https://zaizizaizai.github.io/tags/whim/"/>
    
  </entry>
  
  <entry>
    <title>nodejs+mysql实现小型web后台程序</title>
    <link href="https://zaizizaizai.github.io/2017/11/26/nodejs-mysql%E5%AE%9E%E7%8E%B0%E5%B0%8F%E5%9E%8Bweb%E5%90%8E%E5%8F%B0%E7%A8%8B%E5%BA%8F/"/>
    <id>https://zaizizaizai.github.io/2017/11/26/nodejs-mysql实现小型web后台程序/</id>
    <published>2017-11-26T07:52:55.000Z</published>
    <updated>2017-11-26T08:42:18.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://github.com/zaizizaizai/nodejs" target="_blank" rel="noopener">项目地址</a></h1><h2 id="主要实现功能："><a href="#主要实现功能：" class="headerlink" title="主要实现功能："></a>主要实现功能：</h2><p>1.用户名密码登录<br>2.增删改查管理员发布的网页数据</p><h2 id="具体小功能："><a href="#具体小功能：" class="headerlink" title="具体小功能："></a>具体小功能：</h2><p>1.对用户名数据进行哈希加密（签名）<br>2.强制登录页面（重定向）<br>3.浏览器与服务器传输数据</p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h4 id="界面丑了点，当时主要把后台功能搭起来，功能基本齐全，后面会把界面做起来"><a href="#界面丑了点，当时主要把后台功能搭起来，功能基本齐全，后面会把界面做起来" class="headerlink" title="界面丑了点，当时主要把后台功能搭起来，功能基本齐全，后面会把界面做起来"></a>界面丑了点，当时主要把后台功能搭起来，功能基本齐全，后面会把界面做起来</h4><p>登录界面<br> <img src="/images/web/logIn.png" alt="&quot;登录界面&quot;"></p><p>首页<br> <img src="/images/web/menu.png" alt="&quot;首页&quot;"></p><p>发布信息<br> <img src="/images/web/releaseNews.png" alt="&quot;发布信息&quot;"></p><p>用户评价<br> <img src="/images/web/evaluation.png" alt="&quot;用户评价&quot;"></p><h2 id="项目结构："><a href="#项目结构：" class="headerlink" title="项目结构："></a>项目结构：</h2><p> <img src="/images/web/项目结构.png" alt="&quot;项目结构&quot;">  </p><h1 id="server-js"><a href="#server-js" class="headerlink" title="/server.js"></a>/server.js</h1><p>其功能是建服务器监听8080端口。<br>具体代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> server=express();</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取请求数据</span></span><br><span class="line"><span class="comment">//get自带</span></span><br><span class="line">server.<span class="keyword">use</span>(bodyParser.urlencoded());</span><br><span class="line">server.<span class="keyword">use</span>(multerObj.any());</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.cookie、session</span></span><br><span class="line">server.<span class="keyword">use</span>(cookieParser());</span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> keys=[];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100000</span>;i++)&#123;</span><br><span class="line">    keys[i]=<span class="string">'a_'</span>+Math.random();</span><br><span class="line">  &#125;</span><br><span class="line">  server.<span class="keyword">use</span>(cookieSession(&#123;</span><br><span class="line">    name: <span class="string">'sess_id'</span>,</span><br><span class="line">    keys: keys,</span><br><span class="line">    maxAge: <span class="number">20</span>*<span class="number">60</span>*<span class="number">1000</span>  <span class="comment">//20min</span></span><br><span class="line">  &#125;));</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.模板</span></span><br><span class="line">server.engine(<span class="string">'html'</span>, consolidate.ejs);</span><br><span class="line">server.set(<span class="string">'views'</span>, <span class="string">'template'</span>);</span><br><span class="line">server.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.route</span></span><br><span class="line">server.<span class="keyword">use</span>(<span class="string">'/'</span>, <span class="keyword">require</span>(<span class="string">'./route/web'</span>)());</span><br><span class="line">server.<span class="keyword">use</span>(<span class="string">'/admin/'</span>, <span class="keyword">require</span>(<span class="string">'./route/admin'</span>)());</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.default：static</span></span><br><span class="line">server.<span class="keyword">use</span>(<span class="keyword">static</span>(<span class="string">'./static/'</span>));</span><br><span class="line"></span><br><span class="line">console.log(<span class="string">'server is running at port 8080...'</span>);</span><br></pre></td></tr></table></figure><h2 id="各段代码作用如下："><a href="#各段代码作用如下：" class="headerlink" title="各段代码作用如下："></a>各段代码作用如下：</h2><p>1.解析请求数据<br>2.并发给请求方cookie，<br>3.声明调用的模板<br>4.路由功能，区分请求并转入相应界面<br>5.处理静态文件请求</p><h1 id="libs-common-js"><a href="#libs-common-js" class="headerlink" title="/libs/common.js"></a>/libs/common.js</h1><p>该文件封装模板，其功能是将登录时的用户输入的用户名密码等数据用哈希算法加密（签名），让该数据不可见，避免他人获取用户名密码。<br>代码如下：</p><pre><code><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  MD5_SUFFIX: <span class="string">'*****'</span>,</span><br><span class="line">md5: <span class="function"><span class="keyword">function</span> <span class="params">(str)</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj=crypto.createHash(<span class="string">'md5'</span>);</span><br><span class="line"></span><br><span class="line">  obj.update(str);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> obj.digest(<span class="string">'hex'</span>);</span><br></pre></td></tr></table></figure></code></pre><p>其中，MD5_SUFFIX加在数据后面，再进行md5加密，该MD5_SUFFIX是自定义的数据的</p><h1 id="route-index-js"><a href="#route-index-js" class="headerlink" title="/route/index.js"></a>/route/index.js</h1><p>在服务器运行后，服务器一直监听8080端口，当有请求访问，首先对该用户的登录状态和请求进行判定，如果不是管理<br>员，就重定向返回登录界面。如果想访问其他页面，也不行，重定向回登录界面。只有当既是管理员，请求访问的又是<br>登录界面才对请求予以响应。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>检查登录状态</span><br><span class="line">  router.use((req, res, <span class="keyword">next</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(!req.session[<span class="string">'admin_id'</span>] &amp;&amp; req.url!=<span class="string">'/login'</span>)&#123; <span class="regexp">//</span>没有登录</span><br><span class="line">      <span class="regexp">//</span>转向登录界面(重定向)</span><br><span class="line">      res.redirect(<span class="string">'/admin/login'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>如果已确定是管理员，就再来判定其访问请求。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据不同http请求，转向不同页面</span></span><br><span class="line">router.<span class="keyword">use</span>(<span class="string">'/login'</span>, <span class="keyword">require</span>(<span class="string">'./login'</span>)());</span><br><span class="line">router.<span class="keyword">use</span>(<span class="string">'/banners'</span>, <span class="keyword">require</span>(<span class="string">'./banners'</span>)());</span><br><span class="line">router.<span class="keyword">use</span>(<span class="string">'/custom'</span>,<span class="keyword">require</span>(<span class="string">'./custom'</span>)());</span><br></pre></td></tr></table></figure><h1 id="route-login-js"><a href="#route-login-js" class="headerlink" title="/route/login.js"></a>/route/login.js</h1><p>那是怎么判断是否为管理员？<br> 当管理员登录时，后台就拿着页面获取的用户名密码和数据库的进行比对，成功就给浏览器发session，不成功就不发，<br>判定管理员的时候就是看有没有session。<br>为什么不直接不直接用用户名密码验证，而要再加一个session？<br> session可以理解为cookie的加强版，具有生存期，可以控制用户在一定时间内免登陆。若采用用户名密码验证，那每<br> 退一次，就得输入一次密码，这在实际操作中是很不方便的。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">data</span>[<span class="number">0</span>].password==password)&#123;</span><br><span class="line">   <span class="comment">//成功</span></span><br><span class="line">   req.session[<span class="string">'admin_id'</span>]=<span class="keyword">data</span>[<span class="number">0</span>].ID;</span><br><span class="line">   res.redirect(<span class="string">'/admin/'</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h1 id="route和template"><a href="#route和template" class="headerlink" title="route和template"></a>route和template</h1><p>登录后，就对数据进行操作。route和template分别是存放js和静态文件的文件夹，文件夹内的js文件实现的功能相似，都是将页面和数据库连接起来，对数据进行增删改查的操作。就banners页面来说，其具体代码如下：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">var db=mysql.createPool(&#123;<span class="string">host:</span> <span class="string">'localhost'</span>, <span class="string">user:</span> <span class="string">'root'</span>, <span class="string">password:</span> <span class="string">'***'</span>, <span class="string">database:</span> <span class="string">'learner'</span>&#125;);</span><br></pre></td></tr></table></figure><p>修改banner数据</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">db.query(<span class="type">`SELECT</span> * <span class="type">FROM</span> banner_table <span class="type">WHERE</span> id=$&#123;req.query.id&#125;`, (err, data)=&gt;&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">    res.status(<span class="number">500</span>).send(<span class="symbol">'database</span> error').<span class="keyword">end</span><span class="literal">()</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(data.length==<span class="number">0</span>)&#123;</span><br><span class="line">    res.status(<span class="number">404</span>).send(<span class="symbol">'data</span> not found').<span class="keyword">end</span><span class="literal">()</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    db.query(<span class="symbol">'SELECT</span> * <span class="type">FROM</span> banner_table', (err, banners)=&gt;&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">        res.status(<span class="number">500</span>).send(<span class="symbol">'database</span> error').<span class="keyword">end</span><span class="literal">()</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        res.render(<span class="symbol">'admin</span>/banners.ejs', &#123;banners, mod_data: data[<span class="number">0</span>]&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="其他数据操作功能同理"><a href="#其他数据操作功能同理" class="headerlink" title="其他数据操作功能同理"></a>其他数据操作功能同理</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;项目地址&quot;&gt;&lt;a href=&quot;#项目地址&quot; class=&quot;headerlink&quot; title=&quot;项目地址&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/zaizizaizai/nodejs&quot; target=&quot;_blank&quot; rel=&quot;noope
      
    
    </summary>
    
      <category term="项目" scheme="https://zaizizaizai.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="项目，web" scheme="https://zaizizaizai.github.io/tags/%E9%A1%B9%E7%9B%AE%EF%BC%8Cweb/"/>
    
  </entry>
  
  <entry>
    <title>npm重新安装模块</title>
    <link href="https://zaizizaizai.github.io/2017/11/26/npm%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E6%A8%A1%E5%9D%97/"/>
    <id>https://zaizizaizai.github.io/2017/11/26/npm重新安装模块/</id>
    <published>2017-11-26T05:47:54.000Z</published>
    <updated>2017-11-26T05:57:04.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm删除模块，重新安装错误"><a href="#npm删除模块，重新安装错误" class="headerlink" title="npm删除模块，重新安装错误"></a>npm删除模块，重新安装错误</h1><h2 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h2><p>  使用hexo模块的时候，不小心将已经配置好的blog文件删除。在网上查找资料，运行npm cache clean –force，出现错误（不能使用hexo命令）。然后我就准备重装hexo，把usr/bin和local里hexo相关文件删除，用npm重新下载hexo，但还是和之前一样出错</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>  需要删除hexo相关文件和packagejson里的依赖，再重新下载hexo，就可以使用了<br>  具体位置（linux环境）：/home/zaizizaizai/.npm-global/bin和/home/zaizizaizai/.npm-global/lib<br>  补充：此路径为隐藏目录，在home区需要按快捷键ctrl+h显示隐藏文件，或者通过命令行进行操作</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;npm删除模块，重新安装错误&quot;&gt;&lt;a href=&quot;#npm删除模块，重新安装错误&quot; class=&quot;headerlink&quot; title=&quot;npm删除模块，重新安装错误&quot;&gt;&lt;/a&gt;npm删除模块，重新安装错误&lt;/h1&gt;&lt;h2 id=&quot;经过&quot;&gt;&lt;a href=&quot;#经过&quot;
      
    
    </summary>
    
      <category term="node.js" scheme="https://zaizizaizai.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://zaizizaizai.github.io/tags/node-js/"/>
    
      <category term="配置" scheme="https://zaizizaizai.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>自适应网页设计</title>
    <link href="https://zaizizaizai.github.io/2017/11/26/%E8%87%AA%E9%80%82%E5%BA%94%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    <id>https://zaizizaizai.github.io/2017/11/26/自适应网页设计/</id>
    <published>2017-11-26T05:30:50.000Z</published>
    <updated>2017-11-26T06:01:13.810Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html" target="_blank" rel="noopener">点我转向原文章</a><br>转译：pinocchio<br>对于初入前端的学习者来说，设计网页自适应不同分辨率的终端是比较难解决的一件事。<br>自适应网页设计指的是可以自动识别屏幕宽度、并做出相应调整的网页设计。    </li></ul><p>以下是自适应网页设计的方法：</p><h1 id="一、允许网页宽度自动调整"><a href="#一、允许网页宽度自动调整" class="headerlink" title="一、允许网页宽度自动调整"></a>一、允许网页宽度自动调整</h1><p>   在网页代码的头部，加入viewport元标签<br>       <code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;</code><br>   viewport是网页默认的宽度和高度，上面这行代码的意思是，网页宽度默认等于屏幕宽度（width=device-    width），原始缩放比例（initial-scale=1）为1.0，即网页初始大小占屏幕面积的100%。</p><p>   所有主流浏览器(IE9)都支持这个设置。对于老式浏览器（IE6、7、8），需要使用css3-mediaqueries.js。</p><h1 id="二、不使用绝对宽度"><a href="#二、不使用绝对宽度" class="headerlink" title="二、不使用绝对宽度"></a>二、不使用绝对宽度</h1><p>   若在头部加入了viewport元标签，网页会自动更具屏幕宽度调整布局，所以不能使用具有绝对宽度的元素。<br>   即css代码不能制定像素宽度<br>       <code>width:xxx px;</code></p><p>   只能使用百分比宽度<br>       <code>width: xx%;</code><br>   或者<br>       <code>width:auto;</code></p><h1 id="三、相对大小的字体"><a href="#三、相对大小的字体" class="headerlink" title="三、相对大小的字体"></a>三、相对大小的字体</h1><p>   字体也不能使用绝对大小（px），而只能使用相对大小（em）。<br>        <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">　　　　       <span class="attribute">font</span>: normal <span class="number">100%</span> Helvetica, Arial, sans-serif;</span><br><span class="line">　　      &#125;</span><br></pre></td></tr></table></figure></p><p>　　 上面的代码指定，字体大小是页面默认大小的100%，即16像素。<br>　　     <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　 <span class="selector-tag">h1</span> &#123;</span><br><span class="line">　　     <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">　　 &#125;</span><br></pre></td></tr></table></figure></p><p>　　 然后，h1的大小是默认大小的1.5倍，即24像素（24/16=1.5）。<br>　　     <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　 <span class="selector-tag">small</span> &#123;</span><br><span class="line">　　     <span class="attribute">font-size</span>: <span class="number">0.875em</span>;</span><br><span class="line">　　 &#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、流动布局（fluid-grid）"><a href="#四、流动布局（fluid-grid）" class="headerlink" title="四、流动布局（fluid grid）"></a>四、流动布局（fluid grid）</h1><p>   “流动布局”的含义是，各个区块的位置都是浮动的，不是固定不变的。<br>       <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.leftBar</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>float的好处是，如果宽度太小，放不下两个元素，后面的元素会自动滚动到前面元素的下方，不会在水平方向overflow（溢出），避免了水平滚动条的出现。</code></pre><h1 id="五、选择加载css"><a href="#五、选择加载css" class="headerlink" title="五、选择加载css"></a>五、选择加载css</h1><p>   “自适应网页设计”的核心，就是CSS3引入的Media Query模块。<br>   它的意思就是，自动探测屏幕宽度，然后加载相应的CSS文件。<br>       <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span></span><br><span class="line">　 <span class="attribute">media</span>=<span class="string">"screen and (max-device-width: 400px)"</span></span><br><span class="line">　　<span class="attribute">href</span>=<span class="string">"tinyScreen.css"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>   上面的代码意思是，如果屏幕宽度小于400像素（max-device-width: 400px），就加载tinyScreen.css文件。<br>　　     <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">　　     &lt;link <span class="attribute">rel</span>=<span class="string">"stylesheet"</span> <span class="attribute">type</span>=<span class="string">"text/css"</span></span><br><span class="line">　　　　     <span class="attribute">media</span>=<span class="string">"screen and (min-width: 400px) and (max-device-width: 600px)"</span></span><br><span class="line">　　　　     <span class="attribute">href</span>=<span class="string">"smallScreen.css"</span> /&gt;</span><br></pre></td></tr></table></figure></p><p>   如果屏幕宽度在400像素到600像素之间，则加载smallScreen.css文件。<br>   除了用html标签加载CSS文件，还可以在现有CSS文件中加载。<br>      <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　     @import url(<span class="string">"tinyScreen.css"</span>)<span class="built_in"> screen </span><span class="keyword">and</span> (max-device-width: 400px);</span><br></pre></td></tr></table></figure></p><h1 id="六、CSS的-media规则"><a href="#六、CSS的-media规则" class="headerlink" title="六、CSS的@media规则"></a>六、CSS的@media规则</h1><p>   同一个CSS文件中，也可以根据不同的屏幕分辨率，选择应用不同的CSS规则。<br>　　    <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">　　     @<span class="keyword">media</span> screen and (max-device-width: <span class="number">400px</span>) &#123;</span><br><span class="line">　　　　        <span class="selector-class">.column</span> &#123;</span><br><span class="line">　　　　　 　        <span class="attribute">float</span>: none;</span><br><span class="line">　　　　　　         <span class="attribute">width</span>:auto;</span><br><span class="line">　　　　        &#125;</span><br><span class="line">　　　</span><br><span class="line">　　　　     <span class="selector-id">#sidebar</span> &#123;</span><br><span class="line">　　　　　　      <span class="attribute">display</span>:none;</span><br><span class="line">　　　　     &#125;</span><br><span class="line">　　    &#125;</span><br></pre></td></tr></table></figure></p><p>   上面的代码意思是，如果屏幕宽度小于400像素，则column块取消浮动（float:none）、宽度自动调节（width:auto），sidebar块不显示（display:none）。</p><h1 id="七、图片的自适应（fluid-image）"><a href="#七、图片的自适应（fluid-image）" class="headerlink" title="七、图片的自适应（fluid image）"></a>七、图片的自适应（fluid image）</h1><p>   除了布局和文本，”自适应网页设计”还必须实现图片的自动缩放。<br>   这只要一行CSS代码：<br>　　   <code>img { max-width: 100%;}</code><br>   这行代码对于大多数嵌入网页的视频也有效，所以可以写成：<br>　　   <code>img, object { max-width: 100%;}</code><br>   老版本的IE不支持max-width，所以只好写成：<br>　　   <code>img { width: 100%; }</code><br>   此外，windows平台缩放图片时，可能出现图像失真现象。这时，可以尝试使用IE的专有命令：<br>　　   <code>img { -ms-interpolation-mode: bicubic; }</code><br>   或者，Ethan Marcotte的imgSizer.js。<br>　　   <figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">　　   addLoadEvent(<span class="name">function</span>() &#123;</span><br><span class="line">　　　　   var imgs = document.getElementById(<span class="string">"content"</span>).getElementsByTagName(<span class="string">"img"</span>)<span class="comment">;</span></span><br><span class="line">　　　　   imgSizer.collate(<span class="name">imgs</span>)<span class="comment">;</span></span><br><span class="line">　　   &#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点我转向原文章&lt;/a&gt;&lt;br&gt;转译：pinocc
      
    
    </summary>
    
      <category term="web" scheme="https://zaizizaizai.github.io/categories/web/"/>
    
    
      <category term="web，转载，网页设计" scheme="https://zaizizaizai.github.io/tags/web%EF%BC%8C%E8%BD%AC%E8%BD%BD%EF%BC%8C%E7%BD%91%E9%A1%B5%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>扎心了</title>
    <link href="https://zaizizaizai.github.io/2017/11/24/%E6%89%8E%E5%BF%83%E4%BA%86/"/>
    <id>https://zaizizaizai.github.io/2017/11/24/扎心了/</id>
    <published>2017-11-24T03:51:26.000Z</published>
    <updated>2017-11-24T04:05:13.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="今天真扎心了"><a href="#今天真扎心了" class="headerlink" title="今天真扎心了"></a>今天真扎心了</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;今天真扎心了&quot;&gt;&lt;a href=&quot;#今天真扎心了&quot; class=&quot;headerlink&quot; title=&quot;今天真扎心了&quot;&gt;&lt;/a&gt;今天真扎心了&lt;/h1&gt;
      
    
    </summary>
    
      <category term="随想" scheme="https://zaizizaizai.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="日记" scheme="https://zaizizaizai.github.io/tags/%E6%97%A5%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>博客说明</title>
    <link href="https://zaizizaizai.github.io/2017/11/23/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    <id>https://zaizizaizai.github.io/2017/11/23/博客说明/</id>
    <published>2017-11-23T12:30:44.000Z</published>
    <updated>2017-11-24T04:02:29.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客评论说明"><a href="#博客评论说明" class="headerlink" title="博客评论说明"></a>博客评论说明</h1><p>由于多说、跟帖等评论插件都倒了，就转向了友言。结果友言服务器是国外的，得翻墙才能用。就转向了畅言，可是这<br>搜狐畅言得用域名（我怕还没来的及买域名了-_-）。最后还是回到大爱的git了。<br>过程：<br>多说、跟帖–&gt;友言–&gt;畅言–&gt;gitment</p><p>2017-11-23</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;博客评论说明&quot;&gt;&lt;a href=&quot;#博客评论说明&quot; class=&quot;headerlink&quot; title=&quot;博客评论说明&quot;&gt;&lt;/a&gt;博客评论说明&lt;/h1&gt;&lt;p&gt;由于多说、跟帖等评论插件都倒了，就转向了友言。结果友言服务器是国外的，得翻墙才能用。就转向了畅言，可是这&lt;b
      
    
    </summary>
    
      <category term="博客说明" scheme="https://zaizizaizai.github.io/categories/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    
    
      <category term="博客说明" scheme="https://zaizizaizai.github.io/tags/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>深入理解MongoDB</title>
    <link href="https://zaizizaizai.github.io/2017/11/23/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3MongoDB/"/>
    <id>https://zaizizaizai.github.io/2017/11/23/深入理解MongoDB/</id>
    <published>2017-11-23T10:01:16.000Z</published>
    <updated>2017-11-24T03:52:55.203Z</updated>
    
    <content type="html"><![CDATA[<p>这是在我看完《深入理解MongoDB》后，按照自己的理解记录下来的笔记，初次接触，若有错误，敬请指出，感谢！</p><h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h1><p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。<br>MongoDB操作模式：<br>应用程序&lt;=&gt;mongos&lt;=&gt;集群</p><h1 id="二-理解分片"><a href="#二-理解分片" class="headerlink" title="二.理解分片"></a>二.理解分片</h1><h2 id="1-什么是分片（sharding）？"><a href="#1-什么是分片（sharding）？" class="headerlink" title="1.什么是分片（sharding）？"></a>1.什么是分片（sharding）？</h2><p>分片（sharding）是MongoDB用来将大型集合分割到不同服务器上采用的方法。这样做是为实现3个目标：<br>让集群“不可见”<br>让应用程序知道要执行任何“增删改查”操作只需要发送请求给MongoDB这一个对象就行了，剩下的事就交给它了，不需要区分交给那个服务器，简化了应用程序端操作指令。在MongoDB中具体连接客户端与服务器端的就是叫做mongos的专有路由进程，mongos可以比喻为一个秘书，转发客户端的请求，和服务器端的响应。<br>保证集群总是可以读写<br>一个大的集合分为多个分片（shard），当其中一个进程/服务器出现问题，由运行在其他分区的其他副本接替换掉的部分继续工作。<br>使集群易于扩展<br>将大的集群分割为多个小的分区，当需要资源的时候，只需要添加小的空间。</p><h2 id="2-分配数据"><a href="#2-分配数据" class="headerlink" title="2.分配数据"></a>2.分配数据</h2><p>sharding操作后得到分片（shard）是集群中负责数据某一子集的一台或多台服务器。换言之，一个分片包含数据的某个子集。例如一个集群包含1000份代表网站注册用户文档，其中一个分片就可能包含200份。<br>若一个分片包含多个服务器，则每个服务器拥有一份完整的数据副本。</p><p><strong>一分片一区间</strong><br>分配数据最简单的方法就是让一分片负责一区间的数据。假设有四个分片，依次对应[“a”,”f”),[“f”,”n”),[“n”,”t”),[“t”,”{“)区间，{是ASCII码表中字母z后面的字符。许多用户用首字母在范围[“a”,”f”)中的名字来注册，就导致分片1较大，我们可以调整区间使分片1对应的区间缩小，从而让分片均衡。但当分片1和分片2过载时，就不太好处理。假设分片1和分片2各有500G数据，分片3和分片4各有300G数据，此时就需要分片1转移100G数据到分片2，接着从分片2转移200G数据到分片3，最后分片3转移100G数据到分片4，从而使每个分片都具有400G数据，达到均衡。这还只是4个分片，执行这个操作一共移动了400G数据。当考虑到所有分片，可想需要移动的数据量是很大的。</p><p><strong>一分片多区间</strong><br>重新来考虑上面的情况，此时是一分片多区间。我们可以把分片1和分片2都划分为两个区间，分片1分别对应包含400G数据的[“a”,”d”)区间和包含100G数据的[“d”,”f”)区间，分片2分别对应包含400G数据[“f”,”j”)区间和100G数据[“j”,”n”)区间。我们就可以把分片1中的[“d”,”f”)区间的数据直接移动到分片3，把分片2中的[“,j”,”n”)区间的数据直接移动到分片4，相比上一种情况，只需要移动200G数据。添加新的分片也具有同样的优势——减少数据转移量。</p><p><strong>创建块</strong><br>一个区间的数据成为一个数据块（也叫块，chunk），块默认大小为200MB（兼顾可移动性和最小开销），当一个块的区间一分为二是，就变成两个块了。当提到块出不得不说片键了，如下所示<br>{“username”:”gala”,”age”:21}<br>{“username”:”pinocchio”,”age”:25}<br>{“username”:”zaizizaizai”,”age”:16}<br>如果我们选择age字段作为片键病得到一个块区间[20,30），则得到的块为：<br>{“username”:”gala”,”age”:21}<br>{“username”:”pinocchio”,”age”:25}<br>可以把片键理解为一个选择器（标签），也可理解为属性，即挑选符合条件的数据，在这里不仅局限于把age作为片键，username也可以作为片键，且片键值不可修改。<br>随着数据的增加，当一个块变大，MongoDB会自动将其分割为2个小块。若分片间数据比例失衡，MongoDB会迁移块其他分片（由叫做平衡器的进程执行），以达到分片间数据比例总是平衡的状态。同时平衡器会忽略微小的不平衡，否则会导致恶性循环。</p><h1 id="三-建立集群"><a href="#三-建立集群" class="headerlink" title="三.建立集群"></a>三.建立集群</h1><h2 id="选择片键"><a href="#选择片键" class="headerlink" title="选择片键"></a>选择片键</h2><p>片键的选择很重要，因为这关系到读操作的速度。以下介绍集中片键的几个常见反例，以便更好理解片键选择。<br><strong>小基数片键</strong><br>假设我们有3个分片，我们需要选择片键。前后端编程开发常见的建站就需要对数据分类，有用户的数据、管理员的数据、网页参数的数据，那为了方便理解和区分，就选择用户、管理员、网页参数3个片键。虽然管理员数据比较小，但用户的数据会一直增加，增加到一定程度后，MongoDB也不能分割分片里的块了，最终磁盘空间被耗尽。由于片键值数量有限，后来，就会得到一个又大又无法移动，还不能分割的块，这对数据管理造成极大的不方便。<br><strong>升序片键</strong><br>对大部分应用程序而言，新数据被访问的次数总是多于老数据，所以人们会尝试诸如时间戳或者objectID一类的字段作为片键。比如，社交软件上的发动态，每条动态包含消息、地点、时间，我们以时间段来分片。从一个数据块开始，随着时间推移，一个块满了，裂变为两个块，时间点继续增加，这个片键创造了一个单一且不可分散的热点。动态被发出，该时间点MongoDB需要对该时间点对应的块进行写操作，而当大量的动态在同一时间发出，MongoDB来不及对块进行写操作，就会造成堵塞，使应用程序瘫痪。<br><strong>随机片键</strong><br>为了避免以上的热点片键，有人选择取随机的字段来分片。采用这种字段开始还不错，但随着数据量的增加，它会变得越来越慢。现在采用随机片键，已经得到一组均匀分布于各分片的数据块。假设分片上的一个块填满并分裂了，配置服务器注意到分片2比分片1多10个块，为了抹平差距，MongoDB就将分片2中的随机5个块（块的数据量的大小不确定）经由内存发送给分片1。随着数据量的增加，这5个随机的块的数据量会很大，应发大量的磁盘IO，致使数据库变慢。<br><strong>好片键</strong><br>准升序键加搜索键<br>快速起步</p><p>若想尽快上手，可用Github上的mongos-snippets，其中有个simple-setup.py能自动地启动、配置和生成一个集群，它需要MongoDB的Python驱动。</p><p><strong>安装MongoDB的Python驱动</strong><br>sudo easy_install pymongo<br><strong>下载mongos-snippets库并执行以下操作</strong><br>python sharding/simple-setup.py –path=绝对路径</p><p>simple-setup.py会启动一个mongos进程，地址为localhost://27017</p><p>2017.10.29       pinocchio</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是在我看完《深入理解MongoDB》后，按照自己的理解记录下来的笔记，初次接触，若有错误，敬请指出，感谢！&lt;/p&gt;
&lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一.概述&quot;&gt;&lt;/a&gt;一.概述&lt;/h1&gt;&lt;p&gt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://zaizizaizai.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="数据库" scheme="https://zaizizaizai.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="书籍" scheme="https://zaizizaizai.github.io/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>web安全概略</title>
    <link href="https://zaizizaizai.github.io/2017/11/23/web%E5%AE%89%E5%85%A8%E6%A6%82%E7%95%A5/"/>
    <id>https://zaizizaizai.github.io/2017/11/23/web安全概略/</id>
    <published>2017-11-23T09:47:51.000Z</published>
    <updated>2017-11-24T03:52:00.519Z</updated>
    
    <content type="html"><![CDATA[<h2 id="声明：本文章是在看《白帽子讲web安全》时所做的记录，以供复习"><a href="#声明：本文章是在看《白帽子讲web安全》时所做的记录，以供复习" class="headerlink" title="声明：本文章是在看《白帽子讲web安全》时所做的记录，以供复习"></a>声明：本文章是在看《白帽子讲web安全》时所做的记录，以供复习</h2><p>攻击方式重点：sql注入       xss</p><p>技巧：<br>1.数据库里的登录ID和昵称分开</p><h1 id="一-安全世界观"><a href="#一-安全世界观" class="headerlink" title="一.安全世界观"></a>一.安全世界观</h1><h2 id="1-安全是一个持续过程"><a href="#1-安全是一个持续过程" class="headerlink" title="1.安全是一个持续过程"></a>1.安全是一个持续过程</h2><h2 id="2-安全三要素"><a href="#2-安全三要素" class="headerlink" title="2.安全三要素"></a>2.安全三要素</h2><p>2.1机密性<br>2.2完整性<br>2.3可用性</p><h2 id="3-安全评估"><a href="#3-安全评估" class="headerlink" title="3.安全评估"></a>3.安全评估</h2><p>  资产等级划分-&gt;威胁分析-&gt;风险分析-&gt;确认解决方案</p><p>3.1资产等级划分<br>3.2威胁分析<br>3.3风险分析<br>3.4确认解决方案</p><h2 id="4-白帽子兵法"><a href="#4-白帽子兵法" class="headerlink" title="4.白帽子兵法"></a>4.白帽子兵法</h2><p>4.1Secure By Default原则<br>4.1.1黑名单、白名单<br>4.1.2最小权限原则<br>4.1.3纵深防御原则<br>4.1.4数据与代码分开原则<br>4.1.5不可预测性原则</p><h1 id="二-浏览器安全"><a href="#二-浏览器安全" class="headerlink" title="二.浏览器安全"></a>二.浏览器安全</h1><h2 id="2-1同源策略"><a href="#2-1同源策略" class="headerlink" title="2.1同源策略"></a>2.1同源策略</h2><h2 id="2-2浏览器沙箱"><a href="#2-2浏览器沙箱" class="headerlink" title="2.2浏览器沙箱"></a>2.2浏览器沙箱</h2><h1 id="更新中……-2017-11-18"><a href="#更新中……-2017-11-18" class="headerlink" title="更新中……   2017.11.18"></a>更新中……   2017.11.18</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;声明：本文章是在看《白帽子讲web安全》时所做的记录，以供复习&quot;&gt;&lt;a href=&quot;#声明：本文章是在看《白帽子讲web安全》时所做的记录，以供复习&quot; class=&quot;headerlink&quot; title=&quot;声明：本文章是在看《白帽子讲web安全》时所做的记录，以供复
      
    
    </summary>
    
      <category term="web" scheme="https://zaizizaizai.github.io/categories/web/"/>
    
    
      <category term="web" scheme="https://zaizizaizai.github.io/tags/web/"/>
    
      <category term="网络安全，书籍" scheme="https://zaizizaizai.github.io/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%EF%BC%8C%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>终于成功了</title>
    <link href="https://zaizizaizai.github.io/2017/11/22/%E7%BB%88%E4%BA%8E%E6%88%90%E5%8A%9F%E4%BA%86/"/>
    <id>https://zaizizaizai.github.io/2017/11/22/终于成功了/</id>
    <published>2017-11-22T04:19:55.000Z</published>
    <updated>2017-11-23T10:44:13.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应该好了把"><a href="#应该好了把" class="headerlink" title="应该好了把"></a>应该好了把</h2><p>额，刚接触hexo，之前在csdn上写，文章格式还没弄好，见谅！<br>    后续把文章补上…^@^</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;应该好了把&quot;&gt;&lt;a href=&quot;#应该好了把&quot; class=&quot;headerlink&quot; title=&quot;应该好了把&quot;&gt;&lt;/a&gt;应该好了把&lt;/h2&gt;&lt;p&gt;额，刚接触hexo，之前在csdn上写，文章格式还没弄好，见谅！&lt;br&gt;    后续把文章补上…^@^&lt;/p&gt;

      
    
    </summary>
    
      <category term="随想" scheme="https://zaizizaizai.github.io/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="https://zaizizaizai.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
</feed>
