<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zaizizaizai</title>
  
  <subtitle>a dream of a child</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zaizizaizai.github.io/"/>
  <updated>2018-03-03T07:17:32.967Z</updated>
  <id>https://zaizizaizai.github.io/</id>
  
  <author>
    <name>pinocchio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>学习ES6</title>
    <link href="https://zaizizaizai.github.io/2018/03/03/%E5%AD%A6%E4%B9%A0ES6/"/>
    <id>https://zaizizaizai.github.io/2018/03/03/学习ES6/</id>
    <published>2018-03-03T01:44:37.000Z</published>
    <updated>2018-03-03T07:17:32.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h1 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h1><p>ES6(ES2015)——IE10+、Chrome、FireFox、移动端、Node.js</p><h2 id="如何兼容老版本？"><a href="#如何兼容老版本？" class="headerlink" title="如何兼容老版本？"></a>如何兼容老版本？</h2><p><strong>编译、转译</strong></p><ul><li><p>1、在线转换(用户每次打开页面需重新转换，费时)<br>   在线转换有很多工具，在这里以babel为例，在线转换只需要在<head>加上browser.js就行，如下：</head></p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">...省略</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"browser.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"type/babel"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>2、提前编译(babel/browser.js)</p></li></ul><h1 id="ES6变化内容"><a href="#ES6变化内容" class="headerlink" title="ES6变化内容"></a>ES6变化内容</h1><ul><li>1、变量</li><li>2、函数</li><li>3、数组</li><li>4、字符串</li><li>5、面向对象</li><li>6、Promise(串行化的数据请求、异步交互)</li><li>7、generator(将同步操作拆为异步操作)</li><li>8、模块化</li></ul><h1 id="面向对象应用——React"><a href="#面向对象应用——React" class="headerlink" title="面向对象应用——React"></a>面向对象应用——React</h1><blockquote><p>React特点</p><blockquote><p>1、组件化<br>2、强依赖于JSX=babel=browser.js</p></blockquote></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>学习react-组件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"react-dom.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"browser.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        class Item extends React.Component(</span></span><br><span class="line"><span class="undefined">            constructor(...args)&#123;</span></span><br><span class="line"><span class="undefined">                super(...args);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            render()&#123;</span></span><br><span class="line"><span class="xml">                return <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;this.props.str&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        )</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        class List extends React.Component(</span></span><br><span class="line"><span class="undefined">            constructor(params) &#123;</span></span><br><span class="line"><span class="undefined">                super(params);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            render()&#123;</span></span><br><span class="line"><span class="undefined">                // let aItems=[];</span></span><br><span class="line"><span class="undefined">                // for(let i = 0; i &lt; this.props.arr.length; i++)&#123;</span></span><br><span class="line"><span class="undefined">                //     aItems.push(&lt;Item str = &#123;this.props.arr[i]&lt;/Item&gt;&#125;&gt;);</span></span><br><span class="line"><span class="undefined">                // &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">                return <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        &#123;this.props.arr.map(a =&gt; <span class="tag">&lt;<span class="name">Item</span> <span class="attr">str</span> = <span class="string">&#123;a&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Item</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        )</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        window.onload = function()&#123;</span></span><br><span class="line"><span class="undefined">            let oDiv = docum</span></span><br><span class="line"><span class="undefined">            ent.getElementById('div1');</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            ReactDom.render(</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">List</span> <span class="attr">arr</span>=<span class="string">&#123;[</span>'<span class="attr">123</span>','<span class="attr">abc</span>','<span class="attr">bxsa</span>']&#125;&gt;</span><span class="tag">&lt;/<span class="name">List</span>&gt;</span>,</span></span><br><span class="line"><span class="undefined">                oDiv</span></span><br><span class="line"><span class="undefined">            );</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h1><ul><li><p>1、JSON对象</p><ul><li>JSON.stringify</li><li>Json.parse</li></ul></li><li><p>2、简写</p><ul><li><p>名字一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> json = &#123;a, b, <span class="attr">c</span>: <span class="number">6</span>&#125;;</span><br></pre></td></tr></table></figure></li><li><p>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">show <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">show ()&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li>3、json的标准写法<ul><li>1.只能用双引号</li><li>2.所有名字都必须用引号包起来<ul><li>{a: 12, b: 15}  ×</li><li>{‘a’: 12, ‘b’: 15}  ×</li><li>{“a”: 12, “b”: 15}  √</li></ul></li></ul></li></ul><h1 id="generator-生成器"><a href="#generator-生成器" class="headerlink" title="generator(生成器)"></a>generator(生成器)</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>普通函数——一路到底</li></ul><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">show</span>()&#123;</span><br><span class="line">    <span class="selector-tag">alert</span>(<span class="string">'a'</span>);</span><br><span class="line">    <span class="selector-tag">alert</span>(<span class="string">'b'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">show</span>()</span><br></pre></td></tr></table></figure><ul><li>generator——中间能暂停(踹一脚走一步)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'a'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">yield</span>;    <span class="comment">//放弃</span></span><br><span class="line">    </span><br><span class="line">    alert(<span class="string">'b'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> genObj = show();</span><br><span class="line"></span><br><span class="line">genObj.next();    <span class="comment">// a</span></span><br><span class="line">genObj.next();    <span class="comment">// b</span></span><br></pre></td></tr></table></figure><ul><li>generator原理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以上一段代码为例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">'b'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">genObj.next();    <span class="comment">// show_1</span></span><br><span class="line">genObj.next();    <span class="comment">// show_2</span></span><br></pre></td></tr></table></figure><ul><li>yield</li></ul><ul><li>应用场景<br>请求数据</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h1 id=&quot;兼容性&quot;&gt;&lt;a href=&quot;#兼容性&quot; class=&quot;headerlink&quot; title=&quot;兼容性&quot;&gt;&lt;/a&gt;兼容性&lt;/h1&gt;&lt;p
      
    
    </summary>
    
      <category term="web" scheme="https://zaizizaizai.github.io/categories/web/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="web" scheme="https://zaizizaizai.github.io/tags/web/"/>
    
      <category term="es6" scheme="https://zaizizaizai.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>记一次网站解析</title>
    <link href="https://zaizizaizai.github.io/2018/03/01/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BD%91%E7%AB%99%E8%A7%A3%E6%9E%90/"/>
    <id>https://zaizizaizai.github.io/2018/03/01/记一次网站解析/</id>
    <published>2018-03-01T15:07:24.000Z</published>
    <updated>2018-03-03T08:05:33.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天记起要选公选课，同学安利一个教务处app，打开一看发现界面和功能都挺不错的，突然有做教务处微信小程序版本的想法，第一想法就是去找官网api，可转眼一想，哪来的api？原作者说网站解析来的，于是开始第一次抓包过程。</p><h1 id="1、去长大官网溜了一圈"><a href="#1、去长大官网溜了一圈" class="headerlink" title="1、去长大官网溜了一圈"></a>1、去长大官网溜了一圈</h1><p>首先来到官网看了下</p><h3 id="1-1、登录前"><a href="#1-1、登录前" class="headerlink" title="1.1、登录前"></a>1.1、登录前</h3><blockquote><p>教务处登录页面<br><img src="/images/网站解析/长大教务处登录前.png" alt="长大教务处登录前"></p><p>发送请求中的header<br><img src="/images/网站解析/长大教务处登录前header.png" alt="长大教务处登录前header"></p></blockquote><h3 id="1-2、登陆后"><a href="#1-2、登陆后" class="headerlink" title="1.2、登陆后"></a>1.2、登陆后</h3><p><img src="/images/网站解析/长大教务处登录后data.png" alt="长大教务处登录后data"></p><h3 id="1-3、测试"><a href="#1-3、测试" class="headerlink" title="1.3、测试"></a>1.3、测试</h3><blockquote><p>postman测试<br><img src="/images/网站解析/postMan发送教务处请求失败.png" alt="postMan发送教务处请求失败"></p></blockquote><pre><code>一开始想到把请求数据拿到，再伪造不就行了吗？至于怎么发送、接受数据，后面再说嘛...</code></pre><p>结果转眼一想，这还有验证码，难道要把验证码都转发给客户端？我看到的教务处app中用户名和密码都是学号，不科学啊，难道他找到漏洞，把学校教务处数据爬下来了？<br>我转向解析app</p><h1 id="2、解析app"><a href="#2、解析app" class="headerlink" title="2、解析app"></a>2、解析app</h1><blockquote><p>app发送到服务器的数据<br><img src="/images/网站解析/app请求.png" alt="app请求"></p></blockquote><pre><code>从截图中`Request PostData`这一栏中可以看到发送的数据，这个username(学号)没加密，password(密码)加密了，由于学号就是用户名和密码，我试着把密码用md5方法编码、URL编/解码...等一系列还有我没见过的编/解码方法，结果都不与password/原密码匹配，我猜应该加入了干扰字符吧，寻找编码方法失败。但可以看到是发送到`http://221.233.24.23/eams/login.action`,就去这个网址看看。</code></pre><h1 id="3、-教学管理系统溜一圈"><a href="#3、-教学管理系统溜一圈" class="headerlink" title="3、 教学管理系统溜一圈"></a>3、 教学管理系统溜一圈</h1><h3 id="3-1、登录前"><a href="#3-1、登录前" class="headerlink" title="3.1、登录前"></a>3.1、登录前</h3><p>访问这个地址，有登录界面，这张图片是<code>以错误的用户名密码登录时浏览器发送的数据</code></p><blockquote><p>以错误的用户名密码登录时浏览器发送的数据<br><img src="/images/网站解析/失败登录教学管理系统.png" alt="失败登录教学管理系统"></p></blockquote><p><code>username</code>是明文发送，<code>password</code>则加密了，可以看到也是发送了4个参数，这和app发送的请求参数相同，说明那个教务处app就是发送请求到这个教学管理系统的</p><h3 id="3-2、登陆后"><a href="#3-2、登陆后" class="headerlink" title="3.2、登陆后"></a>3.2、登陆后</h3><blockquote><p>以正确的用户名密码登录时浏览器发送的数据<br><img src="/images/网站解析/成功登录教学管理系统.png" alt="成功登录教学管理系统"></p></blockquote><p>这里图片无法显示，图片内容就是与上一个图片内容类似，但就是没有<code>post data</code>，这是什么？没见过啊，为什么登陆成功不发送数据，登录错误还可以显示数据</p><h4 id="留一个坑，不理解"><a href="#留一个坑，不理解" class="headerlink" title="留一个坑，不理解"></a>留一个坑，不理解</h4><h3 id="3-3、测试"><a href="#3-3、测试" class="headerlink" title="3.3、测试"></a>3.3、测试</h3><p><img src="/images/网站解析/成功登录教学管理系统.png" alt="postman发送教学管理系统失败"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天记起要选公选课，同学安利一个教务处app，打开一看发现界面和功能都挺不错的，突然有做教务处微信小程序版本的想法，第一想法就是去找官网ap
      
    
    </summary>
    
      <category term="动手" scheme="https://zaizizaizai.github.io/categories/%E5%8A%A8%E6%89%8B/"/>
    
    
      <category term="web" scheme="https://zaizizaizai.github.io/tags/web/"/>
    
      <category term="抓包" scheme="https://zaizizaizai.github.io/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>模板引擎jade与ejs的区别与重点</title>
    <link href="https://zaizizaizai.github.io/2018/02/27/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8Ejade%E4%B8%8Eejs%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E9%87%8D%E7%82%B9/"/>
    <id>https://zaizizaizai.github.io/2018/02/27/模板引擎jade与ejs的区别与重点/</id>
    <published>2018-02-27T13:03:29.000Z</published>
    <updated>2018-02-27T14:05:45.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、模板引擎"><a href="#一、模板引擎" class="headerlink" title="一、模板引擎"></a>一、模板引擎</h1><blockquote><p> <strong>//TODO</strong></p></blockquote><h1 id="二、jade"><a href="#二、jade" class="headerlink" title="二、jade"></a>二、jade</h1><h2 id="1、认识jade"><a href="#1、认识jade" class="headerlink" title="1、认识jade"></a>1、认识jade</h2><blockquote><p> <strong>//TODO</strong></p></blockquote><h2 id="2、基础语法"><a href="#2、基础语法" class="headerlink" title="2、基础语法"></a>2、基础语法</h2><h3 id="2-1、根据缩进划分层级"><a href="#2-1、根据缩进划分层级" class="headerlink" title="2.1、根据缩进划分层级"></a>2.1、根据缩进划分层级</h3><h3 id="2-2、属性用-表示，用逗号分割"><a href="#2-2、属性用-表示，用逗号分割" class="headerlink" title="2.2、属性用()表示，用逗号分割"></a>2.2、属性用()表示，用逗号分割</h3><blockquote><pre><code>*style = []*class = []</code></pre></blockquote><h3 id="2-3、内容"><a href="#2-3、内容" class="headerlink" title="2.3、内容"></a>2.3、内容</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> xxx</span><br><span class="line">  <span class="selector-tag">span</span> xxx</span><br><span class="line">    a(href=<span class="string">"xxx"</span>)链接</span><br></pre></td></tr></table></figure><h3 id="2-4、渲染"><a href="#2-4、渲染" class="headerlink" title="2.4、渲染"></a>2.4、渲染</h3><blockquote><p> jade.render(‘字符串’);<br> jdde.renderFile(‘模板文件名’, 参数);</p></blockquote><h2 id="3、高级用法"><a href="#3、高级用法" class="headerlink" title="3、高级用法"></a>3、高级用法</h2><h3 id="3-1原样输出"><a href="#3-1原样输出" class="headerlink" title="3.1原样输出"></a>3.1原样输出</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.jade</span></span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">  body</span><br><span class="line">    zaizi</span><br><span class="line">    </span><br><span class="line"><span class="comment">//转为对应html</span></span><br><span class="line"><span class="params">&lt;html&gt;</span></span><br><span class="line">  <span class="params">&lt;head&gt;</span><span class="params">&lt;/head&gt;</span></span><br><span class="line">  <span class="params">&lt;body&gt;</span></span><br><span class="line">    <span class="params">&lt;zaizi&gt;</span><span class="params">&lt;/zaizi&gt;</span></span><br><span class="line">  <span class="params">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><p>从上面代码可以看出，原意是body的内容为zaizi，但实际转译把zaizi作为自定义标签。如何在标签里原样显示内容呢？如下:</p><blockquote><p><strong>加竖线|,原样输出</strong></p></blockquote><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.jade</span></span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">  body</span><br><span class="line">    |zaizi</span><br><span class="line">    </span><br><span class="line"><span class="comment">//转为对应html</span></span><br><span class="line"><span class="params">&lt;html&gt;</span></span><br><span class="line">  <span class="params">&lt;head&gt;</span><span class="params">&lt;/head&gt;</span></span><br><span class="line">  <span class="params">&lt;body&gt;</span>zaizi<span class="params">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure><p>此语法可用于在html代码中写js，例子：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    script</span><br><span class="line">      <span class="string">| //js代码</span></span><br><span class="line">      <span class="string">| //js代码</span></span><br><span class="line">    body</span><br><span class="line">      <span class="string">|zaizi</span></span><br><span class="line">      <span class="string">|dog</span></span><br></pre></td></tr></table></figure><p>以上情况满足写在html中js的需求，但每一行都需要加|，还是比较麻烦，更简单的方法是：<code>在script后面加一个点.</code>，例子：</p><blockquote><p><strong>在标签后加一个点.表示标签后的内容都原样输出</strong></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    script.</span><br><span class="line">      <span class="comment">// js代码</span></span><br><span class="line">  body</span><br></pre></td></tr></table></figure><p>若要文件结构更清楚，可以尝试引用外部js文件，但会增加http请求数，这里可以采用<code>include</code>，例子：</p><blockquote><p><strong>include引用文件</strong></p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    script.</span><br><span class="line">      include <span class="selector-tag">a</span>.js</span><br><span class="line">  body</span><br></pre></td></tr></table></figure><h3 id="3-2-使用变量"><a href="#3-2-使用变量" class="headerlink" title="3.2 使用变量"></a>3.2 使用变量</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//jade代码</span></span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">  body</span><br><span class="line">    <span class="keyword">div</span> 我的名字: <span class="meta">#&#123;name&#125;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//js代码</span></span><br><span class="line">const jade = require(<span class="string">'jade'</span>);</span><br><span class="line"></span><br><span class="line">const.log(jade.renderFile(<span class="string">'`jade文件地址`'</span>, &#123;pretty: <span class="keyword">true</span>, name: <span class="string">'zaizi'</span>&#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//编译效果</span></span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;&lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;<span class="keyword">div</span>&gt;我的名字: zaizi&lt;/<span class="keyword">div</span>&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、模板引擎&quot;&gt;&lt;a href=&quot;#一、模板引擎&quot; class=&quot;headerlink&quot; title=&quot;一、模板引擎&quot;&gt;&lt;/a&gt;一、模板引擎&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;//TODO&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
      <category term="模板引擎" scheme="https://zaizizaizai.github.io/categories/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
    
      <category term="jade" scheme="https://zaizizaizai.github.io/tags/jade/"/>
    
      <category term="ejs" scheme="https://zaizizaizai.github.io/tags/ejs/"/>
    
      <category term="模板引擎" scheme="https://zaizizaizai.github.io/tags/%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
    
  </entry>
  
  <entry>
    <title>剖析Promise内部结构</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E5%89%96%E6%9E%90Promise%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/剖析Promise内部结构/</id>
    <published>2018-02-25T12:01:27.000Z</published>
    <updated>2018-02-25T13:25:53.881Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  阅读本文需要对promise有一定了解，可阅读<a href="https://zaizizaizai.github.io/2018/02/20/%E8%AF%A6%E8%A7%A3promise/">详解promise</a></p><h1 id="Promise标准解读"><a href="#Promise标准解读" class="headerlink" title="Promise标准解读"></a>Promise标准解读</h1><p>  1.只有一个<code>then</code>方法，没有<code>catch</code>，<code>race</code>，<code>all</code>等方法，甚至没有构造函数</p><pre><code>Promise标准中仅指定了Promise对象的`then`方法的行为，其他常见的方法/函数都没有指定，包括`catch`，`race`，`all`等常用方法，甚至也没有指定该乳环构造一个Promise对象，而且`then`也没有一般实现中(Q,$q等)所支持的第三个参数，一般成为onProgress</code></pre><p>  2.<code>then</code>方法返回一个新的Promise</p><pre><code>Promise的`then`方法返回一个新的Promise，而不是返回this，此处下文会有更多解释<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">promise2</span> = promise1.<span class="keyword">then</span>(alert);</span><br><span class="line">promise2 != promise1 //<span class="literal">true</span></span><br></pre></td></tr></table></figure></code></pre><p>  3.不同Promise的实现需要可以相互调用(interoperable)</p><p>  4.Promise的初始状态为pending，它可以由此状态转换为fulfilled(也叫resolved)或者rejected，一旦状态确定，就不可以再转换为其他状态，状态确定的过程成为settle</p><p>  5.<a href="https://promisesaplus.com/" target="_blank" rel="noopener">更具体的标准</a></p><h1 id="一步一步实现一个Promise"><a href="#一步一步实现一个Promise" class="headerlink" title="一步一步实现一个Promise"></a>一步一步实现一个Promise</h1><p>  一步一步实现一个Promise</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>标准中并没由指定如何构造一个Promise对象，在此以实现Promise的通用方法来构造一个Promise对象，即ES6原生Promise里所使用的方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise构造函数接收一个executor函数，execuyor函数执行完同步或者异步操作后，调用它的两个参数resolve和reject</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果操作成功，调用resolve并传入value</span></span><br><span class="line"><span class="comment">如果操作失败，调用reject并传入reason</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>先实现构造函数的框架：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span><span class="params">(executor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">self</span> = this;</span><br><span class="line"><span class="keyword">self</span>.status = <span class="string">'pending'</span>;  <span class="comment">//Promise当前的状态</span></span><br><span class="line"><span class="keyword">self</span>.data = undefined;  <span class="comment">//Promise的值</span></span><br><span class="line"><span class="keyword">self</span>.onResolvedCallback = [];  <span class="comment">//Promise resolve时的回调函数</span></span><br><span class="line"><span class="keyword">self</span>.onRejectedCallback = [];  <span class="comment">//Promise reject时的回调函数</span></span><br><span class="line"></span><br><span class="line">executor(resolve, reject);  <span class="comment">//执行executor并传入相应的参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码基本实现了Promise构造函数的主体，但还是有两个问题：</p><p>1.我们给executor函数传了两个参数：resolve和reject，这两个参数尚未定义</p><p>2.executor也有可能出错(throw)，此时，Promise应该被其throw出的值reject：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>所以我们需要在构造函数里定义resolve和reject这两个函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span><span class="params">(executor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">self</span> = this;</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">self</span> = this</span><br><span class="line"><span class="keyword">self</span>.status = <span class="string">'pending'</span> <span class="comment">// Promise当前的状态</span></span><br><span class="line"><span class="keyword">self</span>.data = undefined  <span class="comment">// Promise的值</span></span><br><span class="line"><span class="keyword">self</span>.onResolvedCallback = [] <span class="comment">// Promise resolve时的回调函数集，因为在Promise结束之前有可能有多个回调添加到它上面</span></span><br><span class="line"><span class="keyword">self</span>.onRejectedCallback = [] <span class="comment">// Promise reject时的回调函数集，因为在Promise结束之前有可能有多个回调添加到它上面</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span><span class="params">(value)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span><span class="params">(reson)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;<span class="comment">//try/catch捕捉错误</span></span><br><span class="line">executor(resolve, reject);<span class="comment">//执行executor</span></span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">reject(e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="原文"><a href="#原文" class="headerlink" title="原文"></a><a href="https://github.com/xieranmaya/blog/issues/3" target="_blank" rel="noopener">原文</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  阅读本文需要对promise有一定了解，可阅读&lt;a href=&quot;https://zaizizaizai.github.io/2018/0
      
    
    </summary>
    
      <category term="node笔记" scheme="https://zaizizaizai.github.io/categories/node%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="node" scheme="https://zaizizaizai.github.io/tags/node/"/>
    
      <category term="promise" scheme="https://zaizizaizai.github.io/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>博文置顶测试</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E5%8D%9A%E6%96%87%E7%BD%AE%E9%A1%B6%E6%B5%8B%E8%AF%95/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/博文置顶测试/</id>
    <published>2018-02-25T09:09:16.000Z</published>
    <updated>2018-03-03T07:23:07.894Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>在文章中添加<strong>top</strong>值，数值越大文章越靠前，如：<br><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 博文置顶测试</span><br><span class="line">date: 2018<span class="string">-02</span><span class="string">-25</span> 17:09:16</span><br><span class="line"><span class="keyword">tags:</span> [测试,博客]</span><br><span class="line">categories: 博客说明</span><br><span class="line">top: 3</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用方法&quot;&gt;&lt;a href=&quot;#使用方法&quot; class=&quot;headerlink&quot; title=&quot;使用方法&quot;&gt;&lt;/a&gt;使用方法&lt;/h3&gt;&lt;p&gt;在文章中添加&lt;strong&gt;top&lt;/strong&gt;值，数值越大文章越靠前，如：&lt;br&gt;&lt;figure class=&quot;hig
      
    
    </summary>
    
      <category term="博客说明" scheme="https://zaizizaizai.github.io/categories/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    
    
      <category term="测试" scheme="https://zaizizaizai.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="博客" scheme="https://zaizizaizai.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>文章密码测试</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E6%96%87%E7%AB%A0%E5%AF%86%E7%A0%81%E6%B5%8B%E8%AF%95/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/文章密码测试/</id>
    <published>2018-02-25T09:01:10.000Z</published>
    <updated>2018-02-25T09:05:56.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文章密码测试"><a href="#文章密码测试" class="headerlink" title="文章密码测试"></a>文章密码测试</h2><p>测试</p><blockquote><p>点击全文应该需要输入密码<br>密码：123456</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文章密码测试&quot;&gt;&lt;a href=&quot;#文章密码测试&quot; class=&quot;headerlink&quot; title=&quot;文章密码测试&quot;&gt;&lt;/a&gt;文章密码测试&lt;/h2&gt;&lt;p&gt;测试&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;点击全文应该需要输入密码&lt;br&gt;密码：123456&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="博客说明" scheme="https://zaizizaizai.github.io/categories/%E5%8D%9A%E5%AE%A2%E8%AF%B4%E6%98%8E/"/>
    
    
      <category term="测试" scheme="https://zaizizaizai.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="博客" scheme="https://zaizizaizai.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>科学上网</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/科学上网/</id>
    <published>2018-02-25T07:44:48.000Z</published>
    <updated>2018-02-25T08:19:47.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="heroku上部署ss"><a href="#heroku上部署ss" class="headerlink" title="heroku上部署ss"></a>heroku上部署ss</h2><p><strong>先来占个坑</strong></p><p>之前在github上发现了一个在heroku上搭建shadowsocks的项目，自己试着搭建，发现极好用。此时原项目已被作者删除，重新找了一个。<br><strong>特点：</strong></p><blockquote><p>1、快速，youtube上4k视频无压力<br>2、无限流量<br>3、<strong>免费！免费！</strong></p></blockquote><hr><h3 id="github项目地址"><a href="#github项目地址" class="headerlink" title="github项目地址"></a><a href="https://github.com/VincentChanX/shadowsocks-over-websocket" target="_blank" rel="noopener">github项目地址</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;heroku上部署ss&quot;&gt;&lt;a href=&quot;#heroku上部署ss&quot; class=&quot;headerlink&quot; title=&quot;heroku上部署ss&quot;&gt;&lt;/a&gt;heroku上部署ss&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;先来占个坑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前在g
      
    
    </summary>
    
      <category term="科学上网" scheme="https://zaizizaizai.github.io/categories/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
    
      <category term="heroku" scheme="https://zaizizaizai.github.io/tags/heroku/"/>
    
      <category term="ss" scheme="https://zaizizaizai.github.io/tags/ss/"/>
    
      <category term="科学上网" scheme="https://zaizizaizai.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript--深克隆</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%90%86%E8%A7%A3JavaScript--%E6%B7%B1%E5%85%8B%E9%9A%86/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/理解JavaScript--深克隆/</id>
    <published>2018-02-25T07:34:44.000Z</published>
    <updated>2018-02-25T07:39:44.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="八、在JavaScript中如何实现一个深克隆"><a href="#八、在JavaScript中如何实现一个深克隆" class="headerlink" title="八、在JavaScript中如何实现一个深克隆"></a>八、在JavaScript中如何实现一个深克隆</h1><hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在要实现一个深克隆之前我们需要了解一下javascript中的基础类型.</p><p><a href="https://github.com/xiaomuzhu/ElemeFE-node-interview/blob/master/JavaScript%E5%9F%BA%E7%A1%80/JavaScript%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B.md" target="_blank" rel="noopener">javascript基础类型</a>　　</p><blockquote><p>JavaScript原始类型:Undefined、Null、Boolean、Number、String、Symbol<br>JavaScript引用类型:Object</p></blockquote><hr><h4 id="1-浅克隆"><a href="#1-浅克隆" class="headerlink" title="1.浅克隆"></a>1.浅克隆</h4><p>　　<strong>浅克隆</strong>之所以被称为<strong>浅克隆</strong>，是因为对象只会被克隆最外部的一层,至于更深层的对象,则依然是通过引用指向同一块堆内存.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅克隆函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowClone</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> ( <span class="keyword">let</span> i <span class="keyword">in</span> o) &#123;</span><br><span class="line">    obj[i] = o[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 被克隆对象</span></span><br><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: [ <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span> ],</span><br><span class="line">  c: &#123; <span class="attr">h</span>: &#123; <span class="attr">i</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = shallowClone(oldObj);</span><br><span class="line"><span class="built_in">console</span>.log(newObj.c.h, oldObj.c.h); <span class="comment">// &#123; i: 2 &#125; &#123; i: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(oldObj.c.h === newObj.c.h); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>我们可以看到,很明显虽然<code>oldObj.c.h</code>被克隆了,但是它还与<code>oldObj.c.h</code>相等,这表明他们依然指向同一段堆内存,这就造成了如果对<code>newObj.c.h</code>进行修改,也会影响<code>oldObj.c.h</code>,这就不是一版好的克隆.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newObj.c.h.i = <span class="string">'change'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newObj.c.h, oldObj.c.h); <span class="comment">// &#123; i: 'change' &#125; &#123; i: 'change' &#125;</span></span><br></pre></td></tr></table></figure><p>我们改变了<code>newObj.c.h.i</code>的值,<code>oldObj.c.h.i</code>也被改变了,这就是浅克隆的问题所在.</p><p>当然有一个新的api<code>Object.assign()</code>也可以实现浅复制,但是效果跟上面没有差别,所以我们不再细说了.</p><h4 id="2-深克隆"><a href="#2-深克隆" class="headerlink" title="2.深克隆"></a>2.深克隆</h4><h5 id="2-1-JSON-parse方法"><a href="#2-1-JSON-parse方法" class="headerlink" title="2.1 JSON.parse方法"></a>2.1 JSON.parse方法</h5><p>前几年微博上流传着一个传说中最便捷实现深克隆的方法,<br>JSON对象parse方法可以将JSON字符串反序列化成JS对象，stringify方法可以将JS对象序列化成JSON字符串,这两个方法结合起来就能产生一个便捷的深克隆.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(oldObj));</span><br></pre></td></tr></table></figure></p><p>我们依然用上一节的例子进行测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: [ <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span> ],</span><br><span class="line">  c: &#123; <span class="attr">h</span>: &#123; <span class="attr">i</span>: <span class="number">2</span> &#125; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(oldObj));</span><br><span class="line"><span class="built_in">console</span>.log(newObj.c.h, oldObj.c.h); <span class="comment">// &#123; i: 2 &#125; &#123; i: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(oldObj.c.h === newObj.c.h); <span class="comment">// false</span></span><br><span class="line">newObj.c.h.i = <span class="string">'change'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newObj.c.h, oldObj.c.h); <span class="comment">// &#123; i: 'change' &#125; &#123; i: 2 &#125;</span></span><br></pre></td></tr></table></figure></p><p>果然,这是一个实现深克隆的好方法,但是这个解决办法是不是太过简单了.</p><p>确实,这个方法虽然可以解决绝大部分是使用场景,但是却有很多坑.</p><blockquote><p>1.他无法实现对函数 、RegExp等特殊对象的克隆</p><p>2.会抛弃对象的constructor,所有的构造函数会指向Object</p><p>3.对象有循环引用,会报错</p></blockquote><p>主要的坑就是以上几点,我们一一测试下.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">pname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = pname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Messi = <span class="keyword">new</span> person(<span class="string">'Messi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">  a: say,</span><br><span class="line">  b: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>),</span><br><span class="line">  c: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'ab+c'</span>, <span class="string">'i'</span>),</span><br><span class="line">  d: Messi</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(oldObj));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法复制函数</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.a, oldObj.a); <span class="comment">// undefined [Function: say]</span></span><br><span class="line"><span class="comment">// 稀疏数组复制错误</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.b[<span class="number">0</span>], oldObj.b[<span class="number">0</span>]); <span class="comment">// null undefined</span></span><br><span class="line"><span class="comment">// 无法复制正则对象</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.c, oldObj.c); <span class="comment">// &#123;&#125; /ab+c/i</span></span><br><span class="line"><span class="comment">// 构造函数指向错误</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.d.constructor, oldObj.d.constructor); <span class="comment">// [Function: Object] [Function: person]</span></span><br></pre></td></tr></table></figure><p>我们可以看到在对函数、正则对象、稀疏数组等对象克隆时会发生意外，构造函数指向也会发生错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> oldObj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">oldObj.a = oldObj;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(oldObj));</span><br><span class="line"><span class="built_in">console</span>.log(newObj.a, oldObj.a); <span class="comment">// TypeError: Converting circular structure to JSON</span></span><br></pre></td></tr></table></figure><p>对象的循环引用会抛出错误.</p><h5 id="2-2-构造一个深克隆函数"><a href="#2-2-构造一个深克隆函数" class="headerlink" title="2.2 构造一个深克隆函数"></a>2.2 构造一个深克隆函数</h5><p>我们知道要想实现一个靠谱的深克隆方法,上一节提到的<strong>序列/反序列</strong>是不可能了,而通常教程里提到的方法也是不靠谱的,他们存在的问题跟上一届序列反序列操作中凸显的问题是一致的.<br><img src="http://omrbgpqyl.bkt.clouddn.com/18-1-20/43905997.jpg" alt=""><br><em>(这个方法也会出现上一节提到的问题)</em></p><p>由于要面对不同的对象(正则、数组、Date等)要采用不同的处理方式，我们需要实现一个对象类型判断函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isType = <span class="function">(<span class="params">obj, type</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">const</span> typeString = <span class="built_in">Object</span>.prototype.toString.call(obj);</span><br><span class="line">  <span class="keyword">let</span> flag;</span><br><span class="line">  <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Array'</span>:</span><br><span class="line">      flag = typeString === <span class="string">'[object Array]'</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Date'</span>:</span><br><span class="line">      flag = typeString === <span class="string">'[object Date]'</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'RegExp'</span>:</span><br><span class="line">      flag = typeString === <span class="string">'[object RegExp]'</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      flag = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样我们就可以对特殊对象进行类型判断了,从而采用针对性的克隆策略.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = <span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isType(arr, <span class="string">'Array'</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>对于正则对象,我们在处理之前要先补充一点新知识.</p><p>我们需要通过<a href="http://es6.ruanyifeng.com/#docs/regex#flags-%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener">正则的扩展</a>了解到<strong>flags 属性 </strong>等等,因此我们需要实现一个提取flags的函数.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getRegExp = <span class="function"><span class="params">re</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> flags = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.global) flags += <span class="string">'g'</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.ignoreCase) flags += <span class="string">'i'</span>;</span><br><span class="line">  <span class="keyword">if</span> (re.multiline) flags += <span class="string">'m'</span>;</span><br><span class="line">  <span class="keyword">return</span> flags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>做好了这些准备工作,我们就可以进行深克隆的实现了.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* deep clone</span></span><br><span class="line"><span class="comment">* @param  &#123;[type]&#125; parent object 需要进行克隆的对象</span></span><br><span class="line"><span class="comment">* @return &#123;[type]&#125;        深克隆后的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> clone = <span class="function"><span class="params">parent</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 维护两个储存循环引用的数组</span></span><br><span class="line">  <span class="keyword">const</span> parents = [];</span><br><span class="line">  <span class="keyword">const</span> children = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> _clone = <span class="function"><span class="params">parent</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parent === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> parent !== <span class="string">'object'</span>) <span class="keyword">return</span> parent;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> child, proto;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isType(parent, <span class="string">'Array'</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对数组做特殊处理</span></span><br><span class="line">      child = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isType(parent, <span class="string">'RegExp'</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对正则对象做特殊处理</span></span><br><span class="line">      child = <span class="keyword">new</span> <span class="built_in">RegExp</span>(parent.source, getRegExp(parent));</span><br><span class="line">      <span class="keyword">if</span> (parent.lastIndex) child.lastIndex = parent.lastIndex;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isType(parent, <span class="string">'Date'</span>)) &#123;</span><br><span class="line">      <span class="comment">// 对Date对象做特殊处理</span></span><br><span class="line">      child = <span class="keyword">new</span> <span class="built_in">Date</span>(parent.getTime());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 处理对象原型</span></span><br><span class="line">      proto = <span class="built_in">Object</span>.getPrototypeOf(parent);</span><br><span class="line">      <span class="comment">// 利用Object.create切断原型链</span></span><br><span class="line">      child = <span class="built_in">Object</span>.create(proto);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理循环引用</span></span><br><span class="line">    <span class="keyword">const</span> index = parents.indexOf(parent);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index != <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果父数组存在本对象,说明之前已经被引用过,直接返回此对象</span></span><br><span class="line">      <span class="keyword">return</span> children[index];</span><br><span class="line">    &#125;</span><br><span class="line">    parents.push(parent);</span><br><span class="line">    children.push(child);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> parent) &#123;</span><br><span class="line">      <span class="comment">// 递归</span></span><br><span class="line">      child[i] = _clone(parent[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> child;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> _clone(parent);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们做一下测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">pname</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = pname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Messi = <span class="keyword">new</span> person(<span class="string">'Messi'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hi'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> oldObj = &#123;</span><br><span class="line">  a: say,</span><br><span class="line">  c: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'ab+c'</span>, <span class="string">'i'</span>),</span><br><span class="line">  d: Messi,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">oldObj.b = oldObj;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = clone(oldObj);</span><br><span class="line"><span class="built_in">console</span>.log(newObj.a, oldObj.a); <span class="comment">// [Function: say] [Function: say]</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.b, oldObj.b); <span class="comment">// &#123; a: [Function: say], c: /ab+c/i, d: person &#123; name: 'Messi' &#125;, b: [Circular] &#125; &#123; a: [Function: say], c: /ab+c/i, d: person &#123; name: 'Messi' &#125;, b: [Circular] &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.c, oldObj.c); <span class="comment">// /ab+c/i /ab+c/i</span></span><br><span class="line"><span class="built_in">console</span>.log(newObj.d.constructor, oldObj.d.constructor); <span class="comment">// [Function: person] [Function: person]</span></span><br></pre></td></tr></table></figure></p><p>当然,我们这个深克隆还不算完美,例如Buffer对象、Promise、Set、Map可能都需要我们做特殊处理，另外对于确保没有循环引用的对象，我们可以省去对循环引用的特殊处理，因为这很消耗时间，不过一个基本的深克隆函数我们已经实现了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;八、在JavaScript中如何实现一个深克隆&quot;&gt;&lt;a href=&quot;#八、在JavaScript中如何实现一个深克隆&quot; class=&quot;headerlink&quot; title=&quot;八、在JavaScript中如何实现一个深克隆&quot;&gt;&lt;/a&gt;八、在JavaScript中如何实
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://zaizizaizai.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://zaizizaizai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript--传递引用</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%90%86%E8%A7%A3JavaScript--%E4%BC%A0%E9%80%92%E5%BC%95%E7%94%A8/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/理解JavaScript--传递引用/</id>
    <published>2018-02-25T07:23:29.000Z</published>
    <updated>2018-02-25T07:24:58.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="七、传递引用"><a href="#七、传递引用" class="headerlink" title="七、传递引用"></a>七、传递引用</h1><hr><h4 id="1-JavaScript中的基本类型传递"><a href="#1-JavaScript中的基本类型传递" class="headerlink" title="1.JavaScript中的基本类型传递"></a>1.JavaScript中的基本类型传递</h4><p>一个我们经常遇到的问题：“JS中的值是按值传递，还是按引用传递呢？”</p><p>由于js中存在<strong>复杂类型</strong>和<strong>基本类型</strong>,对于<strong>基本类型</strong>而言,是按值传递的.    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">test(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>虽然在函数<code>test</code>中<code>a</code>被修改,并没有有影响到<br>外部<code>a</code>的值,基本类型是按值传递的.</p><hr><h4 id="2-复杂类型按引用传递"><a href="#2-复杂类型按引用传递" class="headerlink" title="2.复杂类型按引用传递?"></a>2.复杂类型按引用传递?</h4><p>我们将外部<code>a</code>作为一个对象传入<code>test</code>函数.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x.a = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">test(a); <span class="comment">// &#123; a: 10, b: 2 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; a: 10, b: 2 &#125;</span></span><br></pre></td></tr></table></figure></p><p>可以看到,在函数体内被修改的<code>a</code>对象也同时影响到了外部的<code>a</code>对象,可见复杂类型是按<strong>引用传递的</strong>.</p><p>可是如果再做一个实验:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">  a: <span class="number">1</span>,</span><br><span class="line">  b: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  x = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">test(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#123; a: 1, b: 2 &#125;</span></span><br></pre></td></tr></table></figure></p><p>外部的<code>a</code>并没有被修改,如果是按引用传递的话,由于共享同一个堆内存,<code>a</code>在外部也会表现为<code>10</code>才对.<br>此时的复杂类型同时表现出了<code>按值传递</code>和<code>按引用传递</code>的特性.</p><hr><h4 id="3-按共享传递"><a href="#3-按共享传递" class="headerlink" title="3.按共享传递"></a>3.按共享传递</h4><p>复杂类型之所以会产生这种特性,原因就是在传递过程中,对象<code>a</code>先产生了一个<code>副本a</code>,这个<code>副本a</code>并不是深克隆得到的<code>副本a</code>,<code>副本a</code>地址同样指向对象<code>a</code>指向的堆内存.</p><p><img src="http://omrbgpqyl.bkt.clouddn.com/17-8-31/72507393.jpg" alt=""></p><p>因此在函数体中修改<code>x=10</code>只是修改了<code>副本a</code>,<code>a</code>对象没有变化.<br>但是如果修改了<code>x.a=10</code>是修改了两者指向的同一堆内存,此时对象<code>a</code>也会受到影响.</p><p>有人讲这种特性叫做<strong>传递引用</strong>,也有一种说法叫做<strong>按共享传递</strong>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;七、传递引用&quot;&gt;&lt;a href=&quot;#七、传递引用&quot; class=&quot;headerlink&quot; title=&quot;七、传递引用&quot;&gt;&lt;/a&gt;七、传递引用&lt;/h1&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-JavaScript中的基本类型传递&quot;&gt;&lt;a href=&quot;#1-JavaScript
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://zaizizaizai.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://zaizizaizai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript--this</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%90%86%E8%A7%A3JavaScript--this/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/理解JavaScript--this/</id>
    <published>2018-02-25T06:09:29.000Z</published>
    <updated>2018-02-25T12:24:59.829Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五、this"><a href="#五、this" class="headerlink" title="五、this"></a>五、this</h1><hr><h4 id="1-什么决定了this的指向"><a href="#1-什么决定了this的指向" class="headerlink" title="1.什么决定了this的指向"></a>1.什么决定了<code>this</code>的指向</h4><p>　　<code>this</code>一直是JavaScript中十分玄乎的存在,很多人为了避开这个琢磨不透的东西,选择了尽量少得运用<code>this</code>,但是不可否认的是,正是因为<code>this</code>的存在才使得JavaScript拥有了更加灵活的特性,因此,搞清楚<code>this</code>是每一个JavaScript学习者的必修课.</p><p>　　<code>this</code>之所以让人又爱又恨,正是因为它的指向让人琢磨不透,在进行详细讲解之前,我们要搞清楚一个大前提,<code>this</code>的指向不是在编写时确定的,而是在执行时确定的.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">  name: <span class="string">"Messi"</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.sayName(); <span class="comment">//"Messi"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = obj.sayName;</span><br><span class="line">f(); <span class="comment">//undefind</span></span><br><span class="line"><span class="built_in">console</span>.log(f === obj.sayName); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p>　　很明显,虽然<code>f</code>与<code>obj.sayName</code>是等价的,但是他们所产生的结果却截然不同,归根到底是因为它们调用位置的不同造成的.</p><p>　　<code>f</code>的调用位置在全局作用域,因此<code>this</code>指向<code>window</code>对象,而<code>window</code>对象并不存在<code>name</code>因此会显示出<code>undefind</code>,而<code>obj.sayName</code>的<code>this</code>指向的是<code>obj</code>对象,因此会打印出<code>&quot;Messi&quot;</code>.</p><p>　　我们可以在以下代码中加入<code>name = &quot;Bale&quot;;</code>来证明以上说法.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Bale"</span>;</span><br><span class="line">obj = &#123;</span><br><span class="line">  name: <span class="string">"Messi"</span>,</span><br><span class="line">  sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.sayName(); <span class="comment">//"Messi"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = obj.sayName;</span><br><span class="line">f(); <span class="comment">//"Bale"</span></span><br><span class="line"><span class="built_in">console</span>.log(f === obj.sayName);  <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>　　大家一定会好奇,调用位置是如何决定<code>obj.sayName</code>的<code>this</code>指向<code>obj</code>对象,<code>f</code>却指向<code>window</code>对象呢,其中遵循什么规则吗?</p><hr><h4 id="2-默认绑定"><a href="#2-默认绑定" class="headerlink" title="2.默认绑定"></a>2.默认绑定</h4><p>　　<code>this</code>一共存在4种绑定规则,默认绑定是其中最常见的,我们可以认为当其他三个绑定规则都没有体现时,就用的是默认的绑定规则.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Bale"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sayName(); <span class="comment">//"Bale"</span></span><br></pre></td></tr></table></figure><p>　　以上代码可以看成我们第一节例子中的<code>f</code>函数,它之所以指向<code>window</code>对象,就是运用了<code>this</code><strong>默认绑定</strong>的规则,因为此实例代码中既没有运用<code>apply</code> 　<code>bind</code>等显示绑定,也没有用<code>new</code>绑定,不适用于其他绑定规则,因此便是<strong>默认绑定</strong>,此时的<code>this</code>指向全局变量,即浏览器端的<code>window</code>Node.js中的<code>global</code>.</p><hr><h4 id="3-隐式绑定"><a href="#3-隐式绑定" class="headerlink" title="3.隐式绑定"></a>3.隐式绑定</h4><p>　　当函数被调用的位置存在上下文对象,或者说被某个对象拥有或包含,这时候函数的<code>f</code>的<code>this</code>被<strong>隐式绑定</strong>到<code>obj</code>对象上.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">this</span>.name );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name: <span class="string">"Messi"</span>,</span><br><span class="line">f: f</span><br><span class="line">&#125;;</span><br><span class="line">obj.f(); <span class="comment">// Messi</span></span><br></pre></td></tr></table></figure></p><hr><h4 id="4-显式绑定"><a href="#4-显式绑定" class="headerlink" title="4.显式绑定"></a>4.显式绑定</h4><p>　　除了极少数的宿主函数之外,所有的函数都拥有<code>call</code> <code>apply</code>方法,而这两个大家既熟悉又陌生的方法可以强制改变<code>this</code>的指向,从而实现显式绑定.</p><p><code>call</code> <code>apply</code>可以产生对<code>this</code>相同的绑定效果,唯一的区别便是他们参数传入的方式不同.</p><blockquote><p><strong>call方法</strong>:<br><strong>语法</strong>：call([thisObj[,arg1[, arg2[,   [,.argN]]]]])<br><strong>定义</strong>：调用一个对象的一个方法，以另一个对象替换当前对象。<br><strong>说明</strong>：<br>　　call 方法可以用来代替另一个对象调用一个方法。call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。<br>　　如果没有提供 thisObj 参数，那么 Global 对象被用作 thisObj。 </p><p><strong>apply方法</strong>：<br><strong>语法</strong>：apply([thisObj[,argArray]])<br><strong>定义</strong>：应用某一对象的一个方法，用另一个对象替换当前对象。<br><strong>说明</strong>：<br>　　如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。</p></blockquote><p>　　第一个参数意义都一样。第二个参数：apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而<code>call</code>则作为<code>call</code>的参数传入（从第二个参数开始）。<br>　　如 <code>func.call(func1,var1,var2,var3)</code>  对应的<code>apply</code>写法为：<code>func.apply(func1,[var1,var2,var3])</code>，同时使用<code>apply</code>的好处是可以直接将当前函数的<code>arguments</code>对象作为<code>apply</code>的第二个参数传入。 　</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="keyword">this</span>.name );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name: <span class="string">"Messi"</span>,</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">f.call(obj); <span class="comment">// Messi</span></span><br><span class="line">f.apply(obj); <span class="comment">//Messi</span></span><br></pre></td></tr></table></figure><p>我们可以看到,效果是相同的,<code>call</code>  <code>apply</code>的作用都是强制将<code>f</code>函数的<code>this</code>绑定到<code>obj</code>对象上.<br>在ES5中有一个与<code>call</code> <code>apply</code>效果类似的<code>bind</code>方法,同样可以达成这种效果,</p><blockquote><p><strong><code>Function.prototype.bind()</code></strong> 的作用是将当前函数与指定的对象绑定，并返回一个新函数，这个新函数无论以什么样的方式调用，其 this 始终指向绑定的对象。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="keyword">this</span>.name );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">"Messi"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">     name: <span class="string">"Bale"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">f.bind(obj)(); <span class="comment">//Messi ,由于bind将obj绑定到f函数上后返回一个新函数,因此需要再在后面加上括号进行执行,这是bind与apply和call的区别</span></span><br></pre></td></tr></table></figure><hr><h4 id="5-new绑定"><a href="#5-new绑定" class="headerlink" title="5.new绑定"></a>5.new绑定</h4><p>用 new 调用一个构造函数，会创建一个新对象, 在创造这个新对象的过程中,新对象会自动绑定到<code>Person</code>对象的<code>this</code>上，那么 <code>this</code> 自然就指向这个新对象。<br>这没有什么悬念，因为 new 本身就是设计来创建新对象的。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Messi'</span>); <span class="comment">//Messi</span></span><br></pre></td></tr></table></figure></p><hr><h4 id="6-绑定优先级"><a href="#6-绑定优先级" class="headerlink" title="6.绑定优先级"></a>6.绑定优先级</h4><p>通过以上的介绍,我们知道了四种绑定的规则,但是当这些规则同时出现,那么谁的优先级更高呢,这才有助于我们判断<code>this</code>的指向.<br>通常情况下,按照优先级排序是:<br><strong>new绑定 &gt; 显式绑定 &gt;隐式绑定 &gt;默认绑定</strong></p><p>我们完全可以通过这个优先级顺序判断<code>this</code>的指向问题.</p><hr><h4 id="7-ES6箭头函数中的this"><a href="#7-ES6箭头函数中的this" class="headerlink" title="7.ES6箭头函数中的this"></a>7.ES6箭头函数中的this</h4><p>箭头函数不同于传统JavaScript中的函数,箭头函数并没有属于自己的<code>this</code>,它的<code>this</code>是捕获其所在上下文的  this 值，作为自己的 this 值,并且由于没有属于自己的<code>this</code>,箭头函数是不会被<code>new</code>调用的.</p><p>MDN文档中关于箭头函数的实例很清楚的说明了这一点.</p><p>在 ECMAScript 3/5 中，这个问题可以通过新增一个变量来指向期望的 this 对象，然后将该变量放到闭包中来解决。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>; <span class="comment">// 也有人选择使用 `that` 而非 `self`. </span></span><br><span class="line">                   <span class="comment">// 只要保证一致就好.</span></span><br><span class="line">  self.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span> <span class="title">growUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 回调里面的 `self` 变量就指向了期望的那个对象了</span></span><br><span class="line">    self.age++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>除此之外，还可以使用 bind 函数，把期望的 this 值传递给 growUp() 函数。</p><p>箭头函数则会捕获其所在上下文的  this 值，作为自己的 this 值，因此下面的代码将如期运行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.age++; <span class="comment">// |this| 正确地指向了 person 对象</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></p><p>当然,我们用babel转码器,也可以让我们更清楚理解箭头函数的<code>this</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    getArrow() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span> === obj);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5，由 Babel 转译</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    getArrow: <span class="function"><span class="keyword">function</span> <span class="title">getArrow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(_this === obj);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;五、this&quot;&gt;&lt;a href=&quot;#五、this&quot; class=&quot;headerlink&quot; title=&quot;五、this&quot;&gt;&lt;/a&gt;五、this&lt;/h1&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-什么决定了this的指向&quot;&gt;&lt;a href=&quot;#1-什么决定了this的指向&quot; cl
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://zaizizaizai.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://zaizizaizai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript--属性</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%90%86%E8%A7%A3JavaScript--%E5%B1%9E%E6%80%A7/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/理解JavaScript--属性/</id>
    <published>2018-02-25T05:50:52.000Z</published>
    <updated>2018-02-25T05:55:42.458Z</updated>
    
    <content type="html"><![CDATA[<h1 id="六、属性"><a href="#六、属性" class="headerlink" title="六、属性"></a>六、属性</h1><hr><h4 id="1-JavaScript中的对象"><a href="#1-JavaScript中的对象" class="headerlink" title="1.JavaScript中的对象"></a>1.JavaScript中的对象</h4><p>JavaScript中的对象一般分为三类:<strong>内置对象</strong>(Array, Error, Date等), <strong>宿主对象</strong>(对于前端来说指的是浏览器对象,例如window), <strong>自定义对象</strong>(指我们自己创建的对象).</p><p>因此,我们主要讨论的内容是围绕自定义对象展开的,今天我们就对象的属性进行深入地探究.</p><hr><h4 id="2-属性的创建"><a href="#2-属性的创建" class="headerlink" title="2.属性的创建"></a>2.属性的创建</h4><p>我们先定义一个对象,然后对其赋值:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">"Messi"</span>;</span><br></pre></td></tr></table></figure></p><p>以上操作相当于给<code>person</code>对象建立了一个<code>name</code>属性,且值为<code>&#39;Messi&#39;</code>.</p><p>那么这个赋值的过程具体的原理是什么呢?</p><p>首先,我们创建了一个’空’对象,之所以我们打上引号,是因为这并不是一个严格意义上的空对象,因为在建立这个对象的过程中,JavaScript已经为这个对象内置了方法和属性,当然是不可见的,在属性的建立过程中就调用了一个隐式的方法<code>[[put]]</code>.</p><p>大概的创建过程是,当属性第一次被创建时,对象调用内部方法<code>[[put]]</code>为对象创建一个节点保存属性.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: person</span><br><span class="line">e=&gt;end: persen.name = &quot;Messi&quot;</span><br><span class="line">io1=&gt;inputoutput: [[put]]</span><br><span class="line"></span><br><span class="line">st-&gt;io1-&gt;e</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-属性的修改"><a href="#3-属性的修改" class="headerlink" title="3.属性的修改"></a>3.属性的修改</h4><p>我们对上例中的代码做一下修改:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person.name = <span class="string">"Messi"</span>;</span><br><span class="line">person.name = <span class="string">"Bale"</span>;</span><br></pre></td></tr></table></figure></p><p>很显然,<code>name</code>被创建后,该属就被进行了修改,原属性值<code>Messi</code>被修改为<code>Bale</code>,那么这个过程又是如何发生的呢?</p><p>其实对象内部除了隐式的<code>[[put]]</code>方法,还有一个<code>[[set]]</code>方法,这个方法不同于<code>[[put]]</code>在创建属性时调用,而是在同一个属性被再次赋值的时候用于更新属性进行的调用.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: person.name = &quot;Messi&quot;</span><br><span class="line">e=&gt;end: persen.name = &quot;Bale&quot;</span><br><span class="line">io1=&gt;inputoutput: [[put]]</span><br><span class="line"></span><br><span class="line">st-&gt;io1-&gt;e</span><br></pre></td></tr></table></figure><hr><h4 id="4-属性的查询"><a href="#4-属性的查询" class="headerlink" title="4.属性的查询"></a>4.属性的查询</h4><p>判断一个属性或者方法是否在一个对象中,通常有两种方式.<br><code>in</code>操作符方式:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Messi"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> person); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p><code>hasOwnProperty</code>方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Messi"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><h4 id="5-属性的删除"><a href="#5-属性的删除" class="headerlink" title="5.属性的删除"></a>5.属性的删除</h4><p>删除一个属性,最正确的方式是用<code>delete</code>方法,一个错误的方式是将该属性赋值为<code>null</code>,该方式的错误之处在于赋值<code>null</code>相当于调用了[[set]]方法把原属性值更改为了<code>null</code>,这个保存属性的节点依然存在,而用<code>delete</code>方法便能彻底删除这个节点.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Messi"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"name"</span> <span class="keyword">in</span> person); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><h4 id="6-属性的枚举"><a href="#6-属性的枚举" class="headerlink" title="6.属性的枚举"></a>6.属性的枚举</h4><p>我们通常用<code>for...in</code>枚举对象中的属性,它会将属性一一返回.<br>在ES5中引入了一个新的方法<code>Object.key()</code>,不同之处在于,它可以将结果以数组的形式返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Messi"</span>,</span><br><span class="line">    age: <span class="number">29</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> pros <span class="keyword">in</span> person ) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(pros); <span class="comment">// name age </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pros = <span class="built_in">Object</span>.keys(person);</span><br><span class="line"><span class="built_in">console</span>.log(pros); <span class="comment">//[ 'name', 'age' ]</span></span><br></pre></td></tr></table></figure></p><blockquote><p>值得注意的是,并非所有的属性都是可枚举的,例如对象自带的属性<code>length</code>等等,因此我们可以用<code>propertyIsEnumerable()</code>方法来判断一个属性是否可枚举.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;六、属性&quot;&gt;&lt;a href=&quot;#六、属性&quot; class=&quot;headerlink&quot; title=&quot;六、属性&quot;&gt;&lt;/a&gt;六、属性&lt;/h1&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-JavaScript中的对象&quot;&gt;&lt;a href=&quot;#1-JavaScript中的对象&quot; class=
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://zaizizaizai.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://zaizizaizai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript--原型</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%90%86%E8%A7%A3JavaScript--%E5%8E%9F%E5%9E%8B/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/理解JavaScript--原型/</id>
    <published>2018-02-25T05:26:32.000Z</published>
    <updated>2018-02-25T05:42:46.604Z</updated>
    
    <content type="html"><![CDATA[<h1 id="四、原型"><a href="#四、原型" class="headerlink" title="四、原型"></a>四、原型</h1><hr><h4 id="1-原型对象"><a href="#1-原型对象" class="headerlink" title="1.原型对象"></a>1.原型对象</h4><p>绝大部分的函数(少数内建函数除外)都有一个<code>prototype</code>属性,这个属性是原型对象用来创建新对象实例,而所有被创建的对象都会共享原型对象,因此这些对象便可以访问原型对象的属性,例如<code>hasOwnProperty()</code>方法存在于Obejct原型对象中,它便可以被任何对象当做自己的方法使用.</p><blockquote><p><code>object.hasOwnProperty( propertyName )</code><br><code>hasOwnProperty()</code>函数的返回值为<code>Boolean</code>类型。如果对象<code>object</code>具有名称为<code>propertyName</code>的属性，则返回<code>true</code>，否则返回<code>false</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">"Messi"</span>,</span><br><span class="line">    age: <span class="number">29</span>,</span><br><span class="line">    profession: <span class="string">"football player"</span></span><br><span class="line">  &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">"name"</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(person.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p></blockquote><p>由以上代码可知,<code>hasOwnProperty()</code>并不存在于<code>person</code>对象中,但是<code>person</code>依然可以拥有此方法.</p><p>很多人此时会好奇,<code>person</code>对象是如何找到<code>Object</code>对象中的方法的呢?这其中的内部机制是什么?<br>这便是我们接下来要说的原型链.</p><hr><h4 id="2-proto-与-Prototype"><a href="#2-proto-与-Prototype" class="headerlink" title="2.__proto__与[[Prototype]]"></a>2.<code>__proto__</code>与<code>[[Prototype]]</code></h4><p>上一篇我们的示意图中曾经出现过<code>__proto__</code>,在ES6之前这个<code>__proto__</code>是大部分主流浏览器(IE除外)引擎提供的,还尚属非ECMA标准,在解析一个对象实例的时候为对象实例添加一个<code>__proto__</code>属性,此属性指向原型对象,我们便可以通过此属性找到原型对象.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">pname, page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = pname;</span><br><span class="line">  <span class="keyword">this</span>.age = page;</span><br><span class="line">&#125;</span><br><span class="line">person.prototype.profession = <span class="string">"football player"</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">"Messi"</span>, <span class="number">29</span>); <span class="comment">//person1 = &#123;name:"Messi", age: 29, profession: "football player"&#125;;</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> person(<span class="string">"Bale"</span>, <span class="number">28</span>); <span class="comment">//person2 = &#123;name:"Bale", age: 28, profession: "football player"&#125;;</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === person.prototype); <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><blockquote><p><code>__proto__</code>除了被主流浏览器支持外,还被Node.js支持,在ES2015进入到规范附录部分,算是被正式纳入了标准.</p></blockquote><p>而在标准的语法里,实例对象是通过内置的内部属性<code>[[Prototype]]</code>来追踪原型对象的,这个<code>[[Prototype]]</code>的指针始终指向原型对象,此属性通常情况下是不可见的,我们需要用<code>getPrototypeOf()</code>来读取<code>[[Prototype]]</code>属性值(这个值就是原型对象).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj) === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>同时我们也可以用<code>isPrototypeOf</code>来检验某个对象是否是另一个对象的原型对象.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.isPrototypeOf(obj)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><hr><h3 id="３．原型链"><a href="#３．原型链" class="headerlink" title="３．原型链"></a>３．原型链</h3><p>在我们了解了<code>__proto__</code>与<code>[[Prototype]]</code>之后,就可以相对容易理解原型链了,由于<code>__proto__</code>与<code>[[Prototype]]</code>功能相似,但是<code>__proto__</code>更容易测试方便学习,我们选择<code>__proto__</code>来进行原型链的讲解.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">pname, page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = pname;</span><br><span class="line">  <span class="keyword">this</span>.age = page;</span><br><span class="line">&#125;</span><br><span class="line">person.prototype.profession = <span class="string">"football player"</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">"Messi"</span>, <span class="number">29</span>); <span class="comment">//person1 = &#123;name:"Messi", age: 29, profession: "football player"&#125;;</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> person(<span class="string">"Bale"</span>, <span class="number">28</span>); <span class="comment">//person2 = &#123;name:"Bale", age: 28, profession: "football player"&#125;;</span></span><br><span class="line">person1.hasOwnProperty(<span class="string">"name"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person1.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">//fasle</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__ === person.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(person.prototype.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(person1.__proto__.__proto__ === person.prototype.__proto__); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person.prototype.__proto__.hasOwnProperty(<span class="string">"hasOwnProperty"</span>)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>我们可以分析这个例子,看看<code>person1</code>对象实例是如何调用<code>hasOwnProperty()</code>这个方法的.</p><ol><li>首先<code>person1</code>对象实例中寻找<code>hasOwnProperty()</code>方法,<code>person1.hasOwnProperty(&quot;hasOwnProperty&quot;)</code>返回<code>false</code>,发现不存在此方法,这时通过<code>__proto__</code>找到<code>person1</code>的原型对象.</li><li>在<code>person1</code>的原型对象<code>person1.__proto__</code>即<code>person.prototype</code>中寻找<code>hasOwnProperty()</code>方法,<code>person.prototype.hasOwnProperty(&quot;hasOwnProperty&quot;)</code>返回<code>false</code>,依然没有找到,此时顺着<code>person.prototype</code>的<code>__proto__</code>找到其原型对象.</li><li>在<code>person.prototype</code>原型对象<code>person.prototype.__proto__</code>即<code>Object.prototype</code>中寻找<code>hasOwnProperty()</code>方法,<code>Object.prototype.hasOwnProperty(&quot;hasOwnProperty&quot;)</code>返回<code>true</code>,由于<code>hasOwnProperty()</code>为<code>Object.prototype</code>内置方法,因此<code>person1</code>顺利找到此方法并调用.</li></ol><p>总而言之,实例对象方法调用,是现在实力对象内部找,如果找到则立即返回调用,如果没有找到就顺着<code>__proto__</code>向上寻找,如果找到该方法则调用,没有找到会直接报错,这便是<strong>原型链</strong>.</p><p>如图所示,会更加直观.</p><hr><h4 id="4-ES6中的-proto"><a href="#4-ES6中的-proto" class="headerlink" title="4.ES6中的__proto__"></a>4.ES6中的<code>__proto__</code></h4><p>虽然<code>__proto__</code>在最新的ECMA标准中被纳入了规范,但是由于<code>__proto__</code>前后的双下划线，说明它本质上是一个内部属性，而不是一个正式的对外的 API.<br>标准明确规定，只有浏览器必须部署这个属性，其他运行环境不一定需要部署，而且新的代码最好认为这个属性是不存在的。因此，无论从语义的角度，还是从兼容性的角度，都不要使用这个属性，而是使用下面的<code>Object.setPrototypeOf()</code>（写操作）、<code>Object.getPrototypeOf()</code>（读操作）代替。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">pname, page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = pname;</span><br><span class="line">  <span class="keyword">this</span>.age = page;</span><br><span class="line">&#125;</span><br><span class="line">person.prototype.profession = <span class="string">"football player"</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">"Messi"</span>, <span class="number">29</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(person1) === person.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(person1, &#123;<span class="attr">League</span>: <span class="string">"La Liga"</span>&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(person1.League); <span class="comment">//La Liga</span></span><br></pre></td></tr></table></figure><p>以上为具体用法,但是值得注意的是<code>Object.setPrototypeOf()</code>在使用中有一个坑,如代码所示:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">pname, page</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = pname;</span><br><span class="line">  <span class="keyword">this</span>.age = page;</span><br><span class="line">&#125;</span><br><span class="line">person.prototype.profession = <span class="string">"football player"</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> person(<span class="string">"Messi"</span>, <span class="number">29</span>); </span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> person(<span class="string">"Bale"</span>, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line"> <span class="built_in">Object</span>.setPrototypeOf(person1, &#123; <span class="attr">League</span>: <span class="string">"La Liga"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person1.League); <span class="comment">//La Liga</span></span><br><span class="line"><span class="built_in">console</span>.log(person2.League); <span class="comment">//undefind</span></span><br></pre></td></tr></table></figure></p><p>也就是说不同于直接用<code>person1.__proto__.League = &quot;La Liga&quot;;</code>会使得两个实例同时生效,<code>Object.setPrototypeOf()</code>只能生效一个实例对象.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;四、原型&quot;&gt;&lt;a href=&quot;#四、原型&quot; class=&quot;headerlink&quot; title=&quot;四、原型&quot;&gt;&lt;/a&gt;四、原型&lt;/h1&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-原型对象&quot;&gt;&lt;a href=&quot;#1-原型对象&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://zaizizaizai.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://zaizizaizai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript--作用域</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%90%86%E8%A7%A3JavaScript-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/理解JavaScript-作用域/</id>
    <published>2018-02-25T05:02:22.000Z</published>
    <updated>2018-02-25T12:25:18.317Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三、作用域"><a href="#三、作用域" class="headerlink" title="三、作用域"></a>三、作用域</h1><hr><h4 id="1-为什么要理解作用域"><a href="#1-为什么要理解作用域" class="headerlink" title="1. 为什么要理解作用域"></a>1. 为什么要理解作用域</h4><p>原因很简单,JavaScript中最重要的一个概念<strong>闭包</strong>的理解就建立在对<strong>作用域</strong>的理解之上,而一个对象的的构成往往离不开<strong>闭包</strong>以及<strong>作用域</strong>.</p><hr><h4 id="2-动态作用域or静态作用域"><a href="#2-动态作用域or静态作用域" class="headerlink" title="2. 动态作用域or静态作用域?"></a>2. 动态作用域or静态作用域?</h4><p>首先我们要搞清楚JavaScript的作用域类型,这有助于我们在分析作用域时的判断.</p><blockquote><p>静态作用域:静态作用域是指声明的作用域是根据程序正文在编译时就确定的，有时也称为词法作用域。</p><p>动态作用域:程序中某个变量所引用的对象是在程序运行时刻根据程序的控制流信息来确定的。</p></blockquote><p>大多数现代编程语言都采用的静态作用域,即代码在写出来的时候就已经确定的,并非在执行时再确定,我们可以根据以下代码一探究竟.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">7</span>;</span><br><span class="line">  f();</span><br><span class="line">&#125;</span><br><span class="line">g(); <span class="comment">// a is not defined</span></span><br></pre></td></tr></table></figure></p><p>这段代码在执行时候会报错,很明显,如果JavaScript采用了动态作用域,<code>a</code>在执行时确定的话,那么以上代码相当于这样:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">7</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">g(); <span class="comment">//undefind</span></span><br></pre></td></tr></table></figure></p><p>因此,我们可以判断出JavaScript属于静态作用域.</p><hr><h4 id="3-函数作用域"><a href="#3-函数作用域" class="headerlink" title="3.函数作用域"></a>3.函数作用域</h4><p>函数是存在自身作用域的,在创建函数之初,函数体内就产生了作用域,为了方便理解,我们引用了《你不知道的JavaScript》书中的代码及图例,他会很清晰地帮助我们理解函数作用域.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = a * <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    bar(b * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">2</span>); <span class="comment">// 2, 4, 12</span></span><br></pre></td></tr></table></figure></p><p>由于JavaScript是采用静态作用域,作用域是在函数创建的时候就确定下来的.</p><hr><h4 id="4-作用域链"><a href="#4-作用域链" class="headerlink" title="4.作用域链"></a>4.作用域链</h4><p>那么,我们可以仔细分析一下这个作用域链.<br><img src="http://omrbgpqyl.bkt.clouddn.com/17-8-25/32385127.jpg" alt=""><br>我们可以看到<code>scope chain</code>通过指向本函数的变量对象,并通过本函数的变量对象与整个父级函数变量对象联系在一起,这就是作用域链.</p><p>所以说，作用域链与一个执行上下文相关，是<strong>内部上下文所有变量对象（包括父变量对象）</strong>的<strong>列表</strong>，用于变量查询。</p><hr><h4 id="5-块级作用域"><a href="#5-块级作用域" class="headerlink" title="5. 块级作用域"></a>5. 块级作用域</h4><p>在ES2015之前,JavaScript中实际上是没有语法层面的块级作用域,这就造成了很多意外的产生.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p>如果是在有块级作用域的语言中,<code>i</code>是不会被打印出来的,但是在JavaScript中却被打印出来,这就是变量泄露的情况,也就是说看似在块级作用域的变量泄漏到全局作用域中,这也就造成了全局污染.</p><p>在ES5中,人们为了解决这个问题,一般采用立即执行函数IIFE来模拟块级作用域,但是这种写法不易读也不优雅,因此,在ES2015中引入了<code>let</code>,通过<code>let</code>可以创建块级作用域.</p><blockquote><p><code>let</code>与<code>var</code>在使用上基本是类似的,但是<code>let</code>有三个主要的特点</p><ul><li>可创建块级作用域</li><li>不存在变量提升</li><li>存在暂时性死区</li></ul></blockquote><p>例如上面的代码如果改用<code>let</code>声明,就不存在变量污染全局的情况<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> i = <span class="number">0</span>; i&lt;<span class="number">3</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">console.<span class="built_in">log</span>(i); //i <span class="built_in">is</span> <span class="keyword">not</span> defind</span><br></pre></td></tr></table></figure></p><p>至于其它let的具体用法,可以直接参考<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">《ES6入门教程》</a>.</p><hr><h4 id="6-什么是闭包"><a href="#6-什么是闭包" class="headerlink" title="6.什么是闭包"></a>6.什么是闭包</h4><p>我们先简单地描述一下闭包:闭包是一个函数读取其它函数变量的桥梁.</p><p>我们先从上面这个简单的例子开始<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = a * <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    bar(b * <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo(<span class="number">2</span>); <span class="comment">// 2, 4, 12</span></span><br></pre></td></tr></table></figure></p><p>根据前面所学作用域的概念,函数<code>f2</code>将引用函数<code>f1</code>的变量<code>a</code>并打印,这个嵌套函数中,子函数对父函数中的变量进行了引用,而使得这个引用得以成行的桥梁就是<strong>‘闭包’</strong>.</p><blockquote><ul><li>很多讲解闭包的文章都用<code>return</code>做实例,值得注意的是,闭包的形成并不一定要有<code>return</code>,只要对其它函数变量产生了引用,就会产生闭包，而<code>return</code>的作用是方便外部访问.  </li></ul></blockquote><p>可以看到bar通过作用域链向上寻找到变量,我理解的闭包是一个对象,包含了<strong>函数本身</strong>以及它<strong>引用的上下文环境</strong>,本实例函数的闭包可以用这段代码来示意下:<br><code>{Funtion:bar, bar.variableObject:{c=12, ...},  foo.variableObject:{b=4, ...},window/global.variableObject:{a=2, ...}}</code><br>具体地说，函数A包含函数B，函数B可以获取函数A中的数据，而函数A不能获取函数B中的数据，则函数A作用域以外可以通过调用函数B改变函数A的数据。</p><blockquote><p>闭包只是javascript函数作用域产生的附属品</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;三、作用域&quot;&gt;&lt;a href=&quot;#三、作用域&quot; class=&quot;headerlink&quot; title=&quot;三、作用域&quot;&gt;&lt;/a&gt;三、作用域&lt;/h1&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-为什么要理解作用域&quot;&gt;&lt;a href=&quot;#1-为什么要理解作用域&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://zaizizaizai.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://zaizizaizai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解JavaScript--预解释</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%90%86%E8%A7%A3JavaScript--%E9%A2%84%E8%A7%A3%E9%87%8A/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/理解JavaScript--预解释/</id>
    <published>2018-02-25T03:58:39.000Z</published>
    <updated>2018-02-25T03:11:26.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二、预解释"><a href="#二、预解释" class="headerlink" title="二、预解释"></a>二、预解释</h1><hr><h4 id="1-从一个实例开始"><a href="#1-从一个实例开始" class="headerlink" title="1.从一个实例开始"></a>1.从一个实例开始</h4><p>仔细阅读以下JavaScript代码,你觉得运行结果会是什么呢?是 <code>1</code> 还是<code>2</code>?<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a= <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure></p><p>答案是undefined.</p><p>那么到底是什么原因导致了这个让人意外的结果呢?这就要从JavaScript解释阶段说起。</p><hr><h4 id="2-JavaScript预解释"><a href="#2-JavaScript预解释" class="headerlink" title="2.JavaScript预解释"></a>2.JavaScript预解释</h4><p>我们可以大致把JavaScript在浏览器中运行的过程分为两个阶段<code>预解释阶段</code>（有人说准确的说法是应该是Parser，我们以预解释方便理解） <code>执行阶段</code>,在JavaScript引擎对JavaScript代码进行执行之前,需要进行预先处理,然后再对处理后的代码进行执行。</p><blockquote><p> 我们平时书写的JavaScript代码并不是JavaScript执行的代码(V8引擎读取一行执行一行这种理解是错误的),它需要预解释后,再由引擎进行执行.</p></blockquote><p>具体的解释过程涉及到浏览器内核的技术不属于前端领域,不过我们可以浅显的理解一下V8在处理JavaScript的一般过程:</p><p>以上例中的<code>var a = 2;</code>为例,我们一般人的理解为<strong>声明了一个值为2的变量a</strong>,但是在JavaScript引擎处理时却分为了两个步骤:</p><blockquote><ol><li><p>读取<code>var a</code>后,在当前作用域中查找是否有相同声明,如果没有就在当前作用域集合中创建一个名为<code>a</code>的变量,否则忽略此声明继续进行解析.</p></li><li><p>接下来,V8引擎会处理<code>a = 2</code>的赋值操作,首先会询问当前作用域中是否有名为<code>a</code>的变量,如果有进行赋值,否则继续向上级作用域询问.</p></li></ol></blockquote><hr><h4 id="3-JavaScript执行环境"><a href="#3-JavaScript执行环境" class="headerlink" title="3.JavaScript执行环境"></a>3.JavaScript执行环境</h4><p>我们上面提到的所谓javascript预解释正是创建函数的<strong>执行环境</strong>（又称“执行上下文”），只有搞定了javascript的执行环境我们才能搞清楚一段代码在执行过后为什么产生这样的结果。</p><p>我们用一段伪代码表示创立的<strong>执行环境</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">executionContextObj = &#123;</span><br><span class="line">    <span class="string">'scopeChain'</span>: &#123; <span class="comment">/* 变量对象 + 所有父级执行上下文中的变量对象 */</span> &#125;,</span><br><span class="line">    <span class="string">'variableObject'</span>: &#123; <span class="comment">/*  函数参数 / 参数, 内部变量以及函数声明 */</span> &#125;,</span><br><span class="line">    <span class="string">'this'</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>作用域链(scopeChain)包括下面提到的变量对象(variableObject)和所有父级执行上下文中的变量对象.</p><p>变量对象(variableObject)是与执行上下文相关的数据作用域,一个与上下文相关的特殊对象，其中存储了在上下文中定义的变量和函数声明:<br>     变量;<br>     函数声明;<br>     函数的形参</p><p>在有了这些基板概念之后我们可以梳理一下js引擎创建执行的过程:  </p><ul><li>创建阶段<ul><li>创建Scope chain  </li><li>创建variableObject</li><li>设置this</li></ul></li><li>执行阶段<ul><li>变量的值、函数的引用  </li><li>执行代码</li></ul></li></ul><p>而变量对象的创建细节如下:</p><ul><li>根据函数的参数，创建并初始化arguments object</li><li>扫描函数内部代码，查找函数声明（Function declaration）<ul><li>对于所有找到的函数声明，将函数名和函数引用存入变量对象中</li><li>如果变量对象中已经有同名的函数，那么就进行覆盖</li></ul></li><li>扫描函数内部代码，查找变量声明（Variable declaration）<ul><li>对于所有找到的变量声明，将变量名存入变量对象中，并初始化为”undefined”</li><li>如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性</li></ul></li></ul><hr><h4 id="4-变量提升"><a href="#4-变量提升" class="headerlink" title="4.变量提升"></a>4.变量提升</h4><p>正是由于以上的处理,产生了大家熟知的JavaScript中的<strong>变量提升</strong>,具体以上代码的执行过程如以下伪代码所示:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// global context</span></span><br><span class="line">executionContextObj = &#123;</span><br><span class="line">    <span class="string">'scopeChain'</span>: &#123; ... &#125;,</span><br><span class="line">    <span class="string">'variableObject'</span>: &#123; <span class="attr">a</span>: <span class="literal">undefined</span>, <span class="attr">f</span>: pointer to <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) &#125;,</span></span><br><span class="line"><span class="function">    '<span class="title">this</span>': </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;<span class="comment">//首先在全局执行环境中声明了变量a以及函数f,此时a虽然被声明,但是尚未赋值</span></span><br><span class="line">x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    executionContextObj &#123;</span><br><span class="line">    <span class="string">'scopeChain'</span>: &#123; ... &#125;,</span><br><span class="line">    <span class="string">'variableObject'</span>: &#123;        </span><br><span class="line">    <span class="built_in">arguments</span>: &#123;&#125;, </span><br><span class="line">    a: <span class="literal">undefined</span> </span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">'this'</span>: &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//内部词法环境中声明了变量a,此时a虽然被声明,但是尚未赋值</span></span><br><span class="line">    <span class="built_in">console</span>.log(a);<span class="comment">//此时a需要被被打印出来,在作用域内寻找a变量赋值,于是被赋值undefined</span></span><br><span class="line">    a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以明显看到,<code>a</code>变量在预解释阶段已经被赋值<code>undefined</code>,在执行阶段js是自上而下单线执行，当<code>console.log(a)</code>执行之时,<code>a=2</code>还没有被执行,<code>a</code>变量的值便是预处理阶段被赋予的<code>undefined</code>,</p><hr><h4 id="5-函数声明与函数表达式"><a href="#5-函数声明与函数表达式" class="headerlink" title="5.函数声明与函数表达式"></a>5.函数声明与函数表达式</h4><p>我们看到,在编译器处理阶段,除了被<code>var</code>声明的变量会有变量提升这一特性之外,函数也会产生这一特性,但是函数声明与函数表达式两种范式创建的函数却表现出不同的结果.  </p><p>我们先看一个实例,运行以下代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">f();</span><br><span class="line">g();</span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'g'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><code>f</code>成功被打印出来,而<code>g函数</code>出现了类型错误,这是什么原因呢?  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">executionContextObj = &#123;</span><br><span class="line">    <span class="string">'scopeChain'</span>: &#123; ... &#125;,</span><br><span class="line">    <span class="string">'variableObject'</span>: &#123; <span class="attr">f</span>: pointer to <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>), <span class="title">g</span>: <span class="title">undefined</span>&#125;,</span></span><br><span class="line"><span class="function">    '<span class="title">this</span>': </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();</span><br><span class="line">g();</span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'g'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看到,在预解释阶段函数声明的<code>f</code>是被指向了正确的函数得以执行,而函数表达式<code>g</code>被赋予<code>undefined</code>,<code>undefined</code>无法被当作函数执行因此报错<code>g is not a function</code>.</p><hr><h4 id="6-冲突处理"><a href="#6-冲突处理" class="headerlink" title="6.冲突处理"></a>6.冲突处理</h4><p>通常情况下我们不会将同一变量变量重复声明,但是出现了类似情况后,编译器会如何处理这些冲突呢?</p><ol><li>变量之间冲突<br>执行以下函数:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure></li></ol><p>结果显而易见,后声明变量值覆盖前者的值</p><ol><li>函数之间冲突<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'g'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><p>结果同变量冲突,后者覆盖前者.</p><ol><li>函数与变量之间冲突</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f =<span class="string">'g'</span>;</span><br></pre></td></tr></table></figure><p>结果如下,函数声明将覆盖变量声明.</p><h2 id="Function-f"><a href="#Function-f" class="headerlink" title="[Function: f]"></a><code>[Function: f]</code></h2><h4 id="7-ES6中的let"><a href="#7-ES6中的let" class="headerlink" title="7.ES6中的let"></a>7.ES6中的let</h4><p>在ES6中出现了两个最新的声明语法<code>let</code>与<code>const</code>,我们以<code>let</code>为例,进行测试看看与<code>var</code>的区别.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">f(); <span class="comment">// ReferenceError: a is not defined</span></span><br></pre></td></tr></table></figure></p><p>这段代码直接报错显示未定义,<code>let</code>与<code>const</code>拥有类似的特性,阻止了变量提升,当代码执行到<code>console.log(a)</code>时,执行换将中<code>a</code>还从未被定义,因此产生了错误.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二、预解释&quot;&gt;&lt;a href=&quot;#二、预解释&quot; class=&quot;headerlink&quot; title=&quot;二、预解释&quot;&gt;&lt;/a&gt;二、预解释&lt;/h1&gt;&lt;hr&gt;
&lt;h4 id=&quot;1-从一个实例开始&quot;&gt;&lt;a href=&quot;#1-从一个实例开始&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://zaizizaizai.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://zaizizaizai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解javaScript--类型判断</title>
    <link href="https://zaizizaizai.github.io/2018/02/25/%E7%90%86%E8%A7%A3JavaScript--%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>https://zaizizaizai.github.io/2018/02/25/理解JavaScript--类型判断/</id>
    <published>2018-02-25T02:44:41.000Z</published>
    <updated>2018-02-25T03:06:47.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、类型判断"><a href="#一、类型判断" class="headerlink" title="一、类型判断"></a>一、类型判断</h1><p>　　</p><blockquote><p>JavaScript原始类型:Undefined、Null、Boolean、Number、String、Symbol </p><p>JavaScript引用类型:Object </p></blockquote><hr><h4 id="1-原始类型与引用类型"><a href="#1-原始类型与引用类型" class="headerlink" title="1.原始类型与引用类型"></a>1.原始类型与引用类型</h4><h6 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h6><p>　　<strong>原始类型</strong>又被称为<strong>基本类型</strong>，原始类型保存的变量和值直接保存在<strong>栈内存</strong>(Stack)中,且空间相互独立,通过值来访问,通过一个例子来解释.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">'Messi'</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = person;</span><br></pre></td></tr></table></figure><p>上述代码在栈内存的示意图是这样的,可以看到,虽然<code>person</code>赋值给了<code>person1</code>.但是两个变量并没有指向同一个值,而是<code>person1</code>自己单独建立一个内存空间,虽然两个变量的值相等,但却是相互独立的.<br><img src="http://omrbgpqyl.bkt.clouddn.com/18-2-20/84377115.jpg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">'Messi'</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = person;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(person1); <span class="comment">//'Messi'</span></span><br></pre></td></tr></table></figure><p>上述代码示意图是这样的,<code>person</code>的值虽然改变,但是由于<code>person1</code>的值是独立储存的,因此不受影响.</p><p>值得一提的是,虽然原始类型的值是储存在相对独立空间,但是它们之间的比较是<strong>按值</strong>比较的.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="string">'Messi'</span>;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="string">'Messi'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person === person1); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h6 id="1-2引用类型"><a href="#1-2引用类型" class="headerlink" title="1.2引用类型"></a>1.2引用类型</h6><p>剩下的就是引用类型了,即Object 类型,再往下细分，还可以分为：Object 类型、Array 类型、Date 类型、Function 类型 等。</p><p>与原始类型不同的是,引用类型的内容是保存在<strong>堆内存</strong>中,而<strong>栈内存</strong>(Heap)中会有一个<strong>堆内存地址</strong>,通过这个地址变量被指向堆内存中<code>Object</code>真正的值,因此引用类型是按照引用访问的.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">name</span>:<span class="string">"percy"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b;</span><br><span class="line">b = a;</span><br><span class="line">a.name = <span class="string">"zyj"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b.name);    <span class="comment">// zyj</span></span><br><span class="line">b.age = <span class="number">22</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.age);     <span class="comment">// 22</span></span><br><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">  name: <span class="string">"zyj"</span>,</span><br><span class="line">  age: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a === c); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>我们可以逐行分析:</p><pre><code>1. `b = a`,如果是原始类型的话,`b`会在栈内自己独自创建一个内存空间保存值,但是引用类型只是`b`的产生一个对内存地址,指向堆内存中的`Object`.2.`a.name = &quot;zyj&quot;`,这个操作属于改变了变量的值,在原始类型中会重新建立新的内存空间(可以看上一节的示意图),而引用类型只需要自己在堆内存中更新自己的属性即可.3.最后创建了一个新的对象`c`,看似跟`b` `a`一样,但是在堆内存中确实两个相互独立的`Object`,引用类型是按照**引用比较**,由于`a` `c`引用的是不同的`Object`所以得到的结果是`fasle`.  </code></pre><h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://omrbgpqyl.bkt.clouddn.com/18-2-20/34304948.jpg" alt=""></h2><h4 id="2-类型中的坑"><a href="#2-类型中的坑" class="headerlink" title="2. 类型中的坑"></a>2. 类型中的坑</h4><p>2.1 数组中的坑<br>数组是JavaScript中最常见的类型之一了,但是在我们实践过程中同样会遇到各种各样的麻烦.</p><p><strong>稀疏数组</strong>:指的是含有空白或空缺单元的数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.length); <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">4</span>] = a[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a.length); <span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">a.forEach(<span class="function"><span class="params">elem</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(elem); <span class="comment">//undefined</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[,,,,undefined]</span></span><br></pre></td></tr></table></figure></p><p>这里需要注意:</p><ol><li>一开始建立的空数组<code>a</code>的长度为0,这可以理解,但是在<code>a[4] = a[5]</code>之后出现了问题,<code>a</code>的长度变成了5,此时<code>a</code>数组是<code>[,,,,undefined]</code>这种形态.</li><li>我们通过遍历,只得到了<code>undefined</code>这一个值,这个<code>undefind</code>是由于<code>a[4] = a[5]</code>赋值,由于<code>a[5]</code>没有定义值为<code>undefined</code>被赋给了<code>a[4]</code>,可以等价为<code>a[4] = undefined</code>.</li></ol><p><strong>字符串索引</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">a[<span class="number">0</span>] = <span class="string">'Bale'</span>;</span><br><span class="line">a[<span class="string">'age'</span>] = <span class="number">28</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.length); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(a[<span class="string">'age'</span>]); <span class="comment">//28</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[ 'Bale', age: 28 ]</span></span><br></pre></td></tr></table></figure><p>数组不仅可以通过数字索引,也可以通过字符串索引,但值得注意的是,字符串索引的键值对并不算在数组的长度里.</p><p>2.2 数字中的坑<br><strong>二进制浮点数</strong></p><p>JavaScript 中的数字类型是基于“二进制浮点数”实现的,使用的是“双精度”格式,这就带来了一些反常的问题,我们那一道经典面试提来讲解下.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>这是个出人意料的结果,实际上a的值约为<code>0.30000000000000004</code>这并不是一个整数值,这就是<code>二进制浮点数</code>带来的副作用.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0.3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a === b); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(a*<span class="number">10</span>)); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.isInteger(b*<span class="number">10</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>我们可以用<code>Number.isInteger()</code>来判断一个数字是否为整数.</p><p><strong>NaN</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>/<span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//Number</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(a)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><code>NaN</code>属于特殊的<code>Number</code>类型,我们可以把它理解为<code>坏数值</code>,因为它属于数值计算中的错误,更加特殊的是它自己都不等价于自己<code>NaN === NaN //false</code>,我们只能用<code>isNaN()</code>来检测一个数字是否为<code>NaN</code>.</p><hr><h4 id="3-类型转换原理"><a href="#3-类型转换原理" class="headerlink" title="3.类型转换原理"></a>3.类型转换原理</h4><p><strong>类型转换</strong>指的是将一种类型转换为另一种类型,例如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="built_in">String</span>(b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//string</span></span><br></pre></td></tr></table></figure></p><p>当然,<strong>类型转换</strong>分为显式和隐式,但是不管是隐式转换还是显式转换,都会遵循一定的原理,由于JavaScript是一门动态类型的语言,可以随时赋予任意值,但是各种运算符或条件判断中是需要特定类型的,因此JavaScript引擎会在运算时为变量设定类型.</p><p>这看起来很美好,JavaScript引擎帮我们搞定了<code>类型</code>的问题,但是引擎毕竟不是ASI(超级人工智能),它的很多动作会跟我们预期相去甚远,我们可以从一到面试题开始.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125;+[] <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>答案是0</p><p>是什么原因造成了上述结果呢?那么我们得从ECMA-262中提到的转换规则和抽象操作说起,有兴趣的童鞋可以仔细阅读下这浩如烟海的<a href="http://ecma-international.org/ecma-262/5.1/" target="_blank" rel="noopener">语言规范</a>,如果没这个耐心还是往下看.</p><p>这是JavaScript种类型转换可以从<strong>原始类型</strong>转为<strong>引用类型</strong>,同样可以将<strong>引用类型</strong>转为<strong>原始类型</strong>,转为原始类型的抽象操作为<code>ToPrimitive</code>,而后续更加细分的操作为:<code>ToNumber ToString ToBoolean</code>,这三种抽象操作的转换表如下所示<br><img src="http://omrbgpqyl.bkt.clouddn.com/17-9-13/15517231.jpg" alt=""></p><p>如果想应付面试,我觉得这张表就差不多了,但是为了更深入的探究JavaScript引擎是如何处理代码中类型转换问题的,就需要看 ECMA-262详细的规范,从而探究其内部原理,我们从这段内部原理示意代码开始.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ECMA-262, section 9.1, page 30. Use null/undefined for no hint,</span></span><br><span class="line"><span class="comment">// (1) for number hint, and (2) for string hint.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToPrimitive</span>(<span class="params">x, hint</span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// Fast case check.</span></span><br><span class="line">  <span class="keyword">if</span> (IS_STRING(x)) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="comment">// Normal behavior.</span></span><br><span class="line">  <span class="keyword">if</span> (!IS_SPEC_OBJECT(x)) <span class="keyword">return</span> x;</span><br><span class="line">  <span class="keyword">if</span> (IS_SYMBOL_WRAPPER(x)) <span class="keyword">throw</span> MakeTypeError(kSymbolToPrimitive);</span><br><span class="line">  <span class="keyword">if</span> (hint == NO_HINT) hint = (IS_DATE(x)) ? STRING_HINT : NUMBER_HINT;</span><br><span class="line">  <span class="keyword">return</span> (hint == NUMBER_HINT) ? DefaultNumber(x) : DefaultString(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ECMA-262, section 8.6.2.6, page 28.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DefaultNumber</span>(<span class="params">x</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (!IS_SYMBOL_WRAPPER(x)) &#123;</span><br><span class="line">    <span class="keyword">var</span> valueOf = x.valueOf;</span><br><span class="line">    <span class="keyword">if</span> (IS_SPEC_FUNCTION(valueOf)) &#123;</span><br><span class="line">      <span class="keyword">var</span> v = %_CallFunction(x, valueOf);</span><br><span class="line">      <span class="keyword">if</span> (IsPrimitive(v)) <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toString = x.toString;</span><br><span class="line">    <span class="keyword">if</span> (IS_SPEC_FUNCTION(toString)) &#123;</span><br><span class="line">      <span class="keyword">var</span> s = %_CallFunction(x, toString);</span><br><span class="line">      <span class="keyword">if</span> (IsPrimitive(s)) <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> MakeTypeError(kCannotConvertToPrimitive);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ECMA-262, section 8.6.2.6, page 28.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DefaultString</span>(<span class="params">x</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">if</span> (!IS_SYMBOL_WRAPPER(x)) &#123;</span><br><span class="line">    <span class="keyword">var</span> toString = x.toString;</span><br><span class="line">    <span class="keyword">if</span> (IS_SPEC_FUNCTION(toString)) &#123;</span><br><span class="line">      <span class="keyword">var</span> s = %_CallFunction(x, toString);</span><br><span class="line">      <span class="keyword">if</span> (IsPrimitive(s)) <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> valueOf = x.valueOf;</span><br><span class="line">    <span class="keyword">if</span> (IS_SPEC_FUNCTION(valueOf)) &#123;</span><br><span class="line">      <span class="keyword">var</span> v = %_CallFunction(x, valueOf);</span><br><span class="line">      <span class="keyword">if</span> (IsPrimitive(v)) <span class="keyword">return</span> v;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> MakeTypeError(kCannotConvertToPrimitive);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码的逻辑是这样的：</p><ol><li>如果变量为字符串，直接返回.</li><li>如果<code>!IS_SPEC_OBJECT(x)</code>，直接返回.</li><li>如果<code>IS_SYMBOL_WRAPPER(x)</code>，则抛出异常.</li><li>否则会根据传入的<code>hint</code>来调用<code>DefaultNumber</code>和<code>DefaultString</code>，比如如果为<code>Date</code>对象，会调用<code>DefaultString</code>.</li><li><code>DefaultNumber</code>：首<code>先x.valueOf</code>，如果为<code>primitive</code>，则返回<code>valueOf</code>后的值，否则继续调用<code>x.toString</code>，如果为<code>primitive</code>，则返回<code>toString</code>后的值，否则抛出异常</li><li><code>DefaultString</code>：和<code>DefaultNumber</code>正好相反，先调用<code>toString</code>，如果不是<code>primitive</code>再调用<code>valueOf</code>.</li></ol><p>那讲了实现原理，这个<code>ToPrimitive</code>有什么用呢？实际很多操作会调用<code>ToPrimitive</code>，比如加、相等或比较操。在进行加操作时会将左右操作数转换为<code>primitive</code>，然后进行相加。</p><p>下面来个实例，({}) + 1（将{}放在括号中是为了内核将其认为一个代码块）会输出啥？可能日常写代码并不会这样写，不过网上出过类似的面试题。</p><p>加操作只有左右运算符同时为<code>String或Number</code>时会执行对应的<code>%_StringAdd或%NumberAdd</code>，下面看下<code>({}) + 1</code>内部会经过哪些步骤：</p><p><code>{}</code>和<code>1</code>首先会调用ToPrimitive<br><code>{}</code>会走到<code>DefaultNumber</code>，首先会调用<code>valueOf</code>，返回的是<code>Object</code> <code>{}</code>，不是primitive类型，从而继续走到<code>toString</code>，返回<code>[object Object]</code>，是<code>String</code>类型<br>最后加操作，结果为<code>[object Object]1</code><br>再比如有人问你<code>[] + 1</code>输出啥时，你可能知道应该怎么去计算了，先对<code>[]</code>调用<code>ToPrimitive</code>，返回空字符串，最后结果为”1”。</p><hr><p>本系列主要参考：</p><ol><li><a href="https://segmentfault.com/a/1190000010352325" target="_blank" rel="noopener">JavaScript 类型的那些事</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、类型判断&quot;&gt;&lt;a href=&quot;#一、类型判断&quot; class=&quot;headerlink&quot; title=&quot;一、类型判断&quot;&gt;&lt;/a&gt;一、类型判断&lt;/h1&gt;&lt;p&gt;　　&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JavaScript原始类型:Undefined、Null、B
      
    
    </summary>
    
      <category term="JavaScript笔记" scheme="https://zaizizaizai.github.io/categories/JavaScript%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="JavaScript" scheme="https://zaizizaizai.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>理解promise</title>
    <link href="https://zaizizaizai.github.io/2018/02/20/%E7%90%86%E8%A7%A3promise/"/>
    <id>https://zaizizaizai.github.io/2018/02/20/理解promise/</id>
    <published>2018-02-20T07:52:30.000Z</published>
    <updated>2018-03-01T01:20:19.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在学习node的路上，理解异步操作是重点，而处理的方法一直在完善，先有setTimeout,后又promise，貌似目前目前大招是async/await(目前三个都不理解，(捂脸…))，下面就开始吧。<br>这是在看<code>JavaScript Promise迷你书</code>时记录的笔记,若有错误，敬请指出，感激不尽。<br>原文<a href="http://liubin.org/promises-book/#how-to-write-promise" target="_blank" rel="noopener">Promise迷你书</a></p><h1 id="1、什么是Promise"><a href="#1、什么是Promise" class="headerlink" title="1、什么是Promise"></a><strong>1、什么是Promise</strong></h1><h2 id="1-1、常见异步处理"><a href="#1-1、常见异步处理" class="headerlink" title="1.1、常见异步处理"></a><strong>1.1、常见异步处理</strong></h2><p>Promise是抽象异步处理对象以及对其进行操作的组件。<br>Promise最初被提出是在E语言，E语言是基于并列/并行处理设计的一种编程语言。<br>常见基于javaScript的异步处理大都利用回调函数<br>        <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span><span class="meta">---</span></span><br><span class="line"><span class="string">//使用回调函数的异步处理</span></span><br><span class="line"><span class="string">getAsync("fileA.txt",</span> <span class="string">function(error,</span> <span class="string">result)&#123;</span></span><br><span class="line"><span class="string">if(error)&#123;</span></span><br><span class="line"><span class="string">throw</span> <span class="string">error;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="bullet">-</span><span class="meta">---</span></span><br></pre></td></tr></table></figure></p><h2 id="1-2、使用Promise进行异步处理"><a href="#1-2、使用Promise进行异步处理" class="headerlink" title="1.2、使用Promise进行异步处理"></a><strong>1.2、使用Promise进行异步处理</strong></h2><p>Promise是把类似的异步处理对象和处理规则规范化，并按照统一的接口来编写，而采取规定方法之外的写法都会出错。<br>        <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Promise进行异步处理</span></span><br><span class="line"><span class="keyword">var</span> promise = getAsyncPromise(<span class="string">"fileA.txt"</span>);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取文件内容成功时的处理</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line"><span class="comment">//获取文件内容失败时的处理</span></span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="number">1</span>&gt;返回promise对象</span><br></pre></td></tr></table></figure></p><p>我们可以向预设了抽象化异步处理的promise对象，注册这个promise对象执行成功和失败时相应的回调函数。<br>这里与常见异步处理操作不同，需严格遵守规则，无法自由的定义回调函数的参数。<br>所以，promise的功能是可以将复杂的异步处理轻松地进行模式化</p><h2 id="1-3、Promise简介"><a href="#1-3、Promise简介" class="headerlink" title="1.3、Promise简介"></a><strong>1.3、Promise简介</strong></h2><p>三种API类型</p><h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p>Promise类似XMLHttpRequest，从构造函数promise新建一个promise对象作为接口。<br>            <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建promise对象</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">res,rej</span>)</span>&#123;</span><br><span class="line"><span class="comment">//异步处理</span></span><br><span class="line"><span class="comment">//处理完后，调用resolve或reject</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Instance-Method"><a href="#Instance-Method" class="headerlink" title="Instance Method"></a>Instance Method</h3><p>通过new生成promise对象，<strong>promise.then()</strong>方法可以设置在resolve(成功)/reject(失败)时调用的回调函数。<br>    <code>promise.then(onFulfilled, onRejected)</code></p><h4 id="resolve-成功-时"><a href="#resolve-成功-时" class="headerlink" title="resolve(成功)时"></a>resolve(成功)时</h4><p>onFulfilled 会被调用</p><h4 id="reject-失败-时"><a href="#reject-失败-时" class="headerlink" title="reject(失败)时"></a>reject(失败)时</h4><p>onRejected 会被调用<br>只想对异常进行处理时可以采用 promise.then(undefined, onRejected)这种方式，<br>只指定reject时的回调函数即可。<br>不过这种情况下 promise.catch(onRejected) 应该是个更好的选择。</p><h3 id="Static-Method"><a href="#Static-Method" class="headerlink" title="Static Method"></a>Static Method</h3><p>辅助方法：<br><code>promise.all()</code><br><code>promise.resolve()</code></p><h2 id="1-3-1、Promise-workflow"><a href="#1-3-1、Promise-workflow" class="headerlink" title="1.3.1、Promise workflow"></a><strong>1.3.1、Promise workflow</strong></h2><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncFunction</span><span class="params">()</span> &#123;</span></span><br><span class="line"><span class="keyword">return</span> new Promise(<span class="function"><span class="keyword">function</span> <span class="params">(resolve, reject)</span> &#123;</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> &#123;</span></span><br><span class="line">    resolve(<span class="string">'Async Hello world'</span>);</span><br><span class="line">&#125;, <span class="number">16</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">asyncFunction().<span class="keyword">then</span>(<span class="function"><span class="keyword">function</span> <span class="params">(value)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(value);    <span class="comment">// =&gt; 'Async Hello world'</span></span><br><span class="line">&#125;).<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> &#123;</span></span><br><span class="line">    console.<span class="built_in">log</span>(<span class="built_in">error</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="1-3-2、Promise的状态"><a href="#1-3-2、Promise的状态" class="headerlink" title="1.3.2、Promise的状态"></a>1.3.2、Promise的状态</h2><p>用<strong>new Promise</strong>实例化的promise对象有以下三个状态：</p><h3 id="“has-resolution”-Fulfilled"><a href="#“has-resolution”-Fulfilled" class="headerlink" title="“has-resolution” - Fulfilled"></a>“has-resolution” - Fulfilled</h3><p>  resolve(成功)时。此时会调用 <strong>onFulfilled</strong></p><h3 id="“has-rejection”-Rejected"><a href="#“has-rejection”-Rejected" class="headerlink" title="“has-rejection” - Rejected"></a>“has-rejection” - Rejected</h3><p>  reject(失败)时。此时会调用 <strong>onRejected</strong></p><h3 id="“unresolved”-Pending"><a href="#“unresolved”-Pending" class="headerlink" title="“unresolved” - Pending"></a>“unresolved” - Pending</h3><p>  既不是resolve也不是reject的状态。也就是promise对象刚被创建后的初始化状态等<br><strong>状态变化</strong><br><img src="/images/promise/promise-states.png" alt="&quot;状态变化&quot;"></p><p>promise对象的状态，从Pending转换为Fulfilled或Rejected之后， 这个promise对象的状态就不会再发生任何变化。<br>也就是说，Promise与Event等不同，在<code>.then</code>后执行的函数可以肯定地说只会被调用一次。<br>另外，Fulfilled和Rejected这两个只中任一状态都可以表示为<strong>Settled</strong>(不变的)。</p><h3 id="Settled"><a href="#Settled" class="headerlink" title="Settled"></a>Settled</h3><p>   resolve(成功)或rejected(失败)。</p><h1 id="1-4、编写Promise代码"><a href="#1-4、编写Promise代码" class="headerlink" title="1.4、编写Promise代码"></a>1.4、编写Promise代码</h1><p>如何写Promise代码。</p><h2 id="1-4-1、创建promise对象"><a href="#1-4-1、创建promise对象" class="headerlink" title="1.4.1、创建promise对象"></a>1.4.1、创建promise对象</h2><p><strong>流程如下</strong><br>  1.<code>new Promise(fn)</code>返回一个promise对象</p><p>  2.在<code>fn</code>中指定异步等处理</p><pre><code>* 处理结果正常，调用resolve(处理结果值)* 处理结果错误，调用reject(Error对象)</code></pre><p>在此用Promise来通过异步处理方式来获取XMLHttpRequest(XHR)的数据。</p><h3 id="创建XHR的promise对象"><a href="#创建XHR的promise对象" class="headerlink" title="创建XHR的promise对象"></a>创建XHR的promise对象</h3><p>首先，创建一个用Promise把XHR处理包装起来的名为<code>getURL</code>的函数。</p><h4 id="xhr-promise-js"><a href="#xhr-promise-js" class="headerlink" title="xhr-promise.js"></a>xhr-promise.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">req.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (req.status == <span class="number">200</span>) &#123;</span><br><span class="line">resolve(req.responseText);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例</span></span><br><span class="line"><span class="keyword">var</span> URL = <span class="string">"http://httpbin.org/get"</span>;</span><br><span class="line">getURL(URL).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果为请求数据</span></span><br></pre></td></tr></table></figure><p><code>getURL</code>只有在通过XHR取得结果状态码为200(数据取得成功)时，调用<code>resovle</code>，其他情况(取得失败)时调用<code>reject</code>方法。</p><p><strong>成功时</strong></p><p><code>resolve(req.responseText)</code>在response的内容中加入了这个参数，resolve方法把参数传给回调函数(<code>then</code>方法会接收这个参数)。</p><p>常见回调函数<code>callback(err, response)</code>的值为err(出错)和response(接收的数据)，来处理正常和异常的情况，而在Promise中resolve/reject则担当了这个职责</p><p><strong>失败时</strong></p><p>当发生错误时，<code>onerror</code>事件被触发，调用<code>reject</code>。</p><p>此时，如reject<code>(new Error(req.statusText))</code>，创建一个Error对象并将具体的值传入，传给reject的参数只要是Error对象(或者继承自Error对象)就行。</p><p><strong>我的疑问</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在学习node的路上，理解异步操作是重点，而处理的方法一直在完善，先有setTimeout,后又promise，貌似目前目前大招是async
      
    
    </summary>
    
      <category term="node笔记" scheme="https://zaizizaizai.github.io/categories/node%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="node" scheme="https://zaizizaizai.github.io/tags/node/"/>
    
      <category term="Javascript，promise" scheme="https://zaizizaizai.github.io/tags/Javascript%EF%BC%8Cpromise/"/>
    
  </entry>
  
  <entry>
    <title>node要点总结</title>
    <link href="https://zaizizaizai.github.io/2018/02/20/node%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://zaizizaizai.github.io/2018/02/20/node要点总结/</id>
    <published>2018-02-20T06:45:17.000Z</published>
    <updated>2018-02-20T09:00:58.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="node开发要点"><a href="#node开发要点" class="headerlink" title="node开发要点"></a>node开发要点</h2><pre><code>1、常用前端技术：    html5    css3    jQuery2、js高级话题：    面向对象    闭包    作用域    设计模式3、其他后端技术：    mongodb    redis    apache    nignix    mysql4、node内置核心库：    全局对象    时事件    流    网络    子程序5、常用知名第三方库：    async    express    koa6、node高级话题：    异步    部署    性能调优    异常调试</code></pre><h1 id="node事件循环机制"><a href="#node事件循环机制" class="headerlink" title="node事件循环机制"></a>node事件循环机制</h1><h1 id="javaScript高级话题-面向对象、作用域、闭包、设计模式"><a href="#javaScript高级话题-面向对象、作用域、闭包、设计模式" class="headerlink" title="* javaScript高级话题(面向对象、作用域、闭包、设计模式)"></a>* javaScript高级话题(面向对象、作用域、闭包、设计模式)</h1><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h2 id="1、常用js类定义的方法？"><a href="#1、常用js类定义的方法？" class="headerlink" title="1、常用js类定义的方法？"></a>1、常用js类定义的方法？</h2><p>构造函数原型法：<br>            <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'pinocchio'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name);</span><br><span class="line">;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person ();</span><br><span class="line">person.sayName();</span><br><span class="line"><span class="comment">//对象创建:</span></span><br><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">name: <span class="string">'pinocchio'</span>,</span><br><span class="line">sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(Person);</span><br><span class="line">person.sayName();</span><br></pre></td></tr></table></figure></p><h2 id="2、js类继承的方法？"><a href="#2、js类继承的方法？" class="headerlink" title="2、js类继承的方法？"></a>2、js类继承的方法？</h2><p>原型链法(Person是Animal的子集，即子类)：<br>            <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">alter(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">Person.prototype = Animal.prototype;<span class="comment">//人继承动物</span></span><br><span class="line">Person.prototype = constructor = <span class="string">'Person'</span>;<span class="comment">//更新构造函数为人</span></span><br><span class="line">属性复制法(单纯复制，两者无继承关系)：</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">alter(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">//复制动物所有属性到人</span></span><br><span class="line"><span class="keyword">for</span> (prop <span class="keyword">in</span> Animal.prototype) &#123;</span><br><span class="line">Person.prototype[prop] = Animal.prototype[prototype];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新构造函数为人</span></span><br><span class="line">Person.prototype.constructor = <span class="string">'Person'</span>;</span><br><span class="line">构造器应用法:</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'animal'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.sayName = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">alter(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> <span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//apply,call,bind方法都行，有细微区别</span></span><br><span class="line">Animal.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3、js类多重继承的方法怎么实现？"><a href="#3、js类多重继承的方法怎么实现？" class="headerlink" title="3、js类多重继承的方法怎么实现？"></a>3、js类多重继承的方法怎么实现？</h2><pre><code>通过类继承里面的属性复制法来实现，可以继承所有父类的prototype属性作用域</code></pre><h2 id="4、js里作用域是什么样？"><a href="#4、js里作用域是什么样？" class="headerlink" title="4、js里作用域是什么样？"></a>4、js里作用域是什么样？</h2><p>函数作用域，<br>            <figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVar = <span class="string">'global var'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">alert(globalVar); <span class="comment">// undefined, 因为globalVar在本函数内被重定义了，导致全局失效，这里使用函数内的变量值，可是此时还没定义</span></span><br><span class="line"><span class="keyword">var</span> globalVar = <span class="string">'overrided var'</span>; <span class="comment">//　globalVar在本函数内被重定义</span></span><br><span class="line"></span><br><span class="line">alert(globalVar);　<span class="comment">// overrided var</span></span><br><span class="line">&#125;</span><br><span class="line">alert(globalVar); <span class="comment">// global var，使用全局变量</span></span><br></pre></td></tr></table></figure></p><h2 id="5、js中this指的是什么？"><a href="#5、js中this指的是什么？" class="headerlink" title="5、js中this指的是什么？"></a>5、js中this指的是什么？</h2><pre><code>this指的是对象本身</code></pre><h2 id="6、apply，call，bind有什么区别？"><a href="#6、apply，call，bind有什么区别？" class="headerlink" title="6、apply，call，bind有什么区别？"></a>6、apply，call，bind有什么区别？</h2><pre><code>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；三者第一个参数都是this要指向的对象，也就是想指定的上下文；三者都可以利用后续参数传参；apply,call是直接执行函数调用，bind是绑定，执行需要再次调用．apply和call的区别是apply接受数组作为参数，而call是接受逗号分隔的无限多个参数列表        <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> Person () &#123;&#125;</span><br><span class="line">Person.prototype.sayName() &#123;</span><br><span class="line">alert(this.name);</span><br><span class="line">&#125;</span><br><span class="line">//普通对象，不是Person实例</span><br><span class="line">var obj = &#123;</span><br><span class="line">name: <span class="string">'pinocchio'</span></span><br><span class="line">&#125;;</span><br><span class="line">//apply</span><br><span class="line">Person.prototype.sayName.apply(obj, [param1, <span class="keyword">param</span>2, <span class="keyword">param</span>3]);</span><br><span class="line">//call</span><br><span class="line">Person.prototype.sayName.call(obj, <span class="keyword">param</span>1, <span class="keyword">param</span>2, <span class="keyword">param</span>3);</span><br><span class="line">//bind,先绑定，再执行</span><br><span class="line">var sn = Person.prototype.sayName.bind(obj);</span><br><span class="line">sn([param1, <span class="keyword">param</span>2, <span class="keyword">param</span>3]);</span><br><span class="line">sn(<span class="keyword">param</span>1, <span class="keyword">param</span>2, <span class="keyword">param</span>3);</span><br></pre></td></tr></table></figure></code></pre><h2 id="7、caller，callee和arguments分别是什么？"><a href="#7、caller，callee和arguments分别是什么？" class="headerlink" title="7、caller，callee和arguments分别是什么？"></a>7、caller，callee和arguments分别是什么？</h2><pre><code><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">caller,callee之间的关系就像是employer和employee之间的关系，就是调用与被调用的关系，二者返回的都是函数对象引用．<span class="built_in">arguments</span>是函数的所有参数列表，它是一个类数组的变量．</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent</span>(<span class="params">param1, param2, param3</span>) </span>&#123;</span><br><span class="line">child(param1, param2, param3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// &#123; '0': 'mqin1', '1': 'mqin2', '2': 'mqin3' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee); <span class="comment">// [Function: child]</span></span><br><span class="line"><span class="built_in">console</span>.log(child.caller); <span class="comment">// [Function: parent]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">parent</span>(<span class="string">'mqin1'</span>, <span class="string">'mqin2'</span>, <span class="string">'mqin3'</span>);</span><br></pre></td></tr></table></figure></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h2 id="8、什么是闭包？闭包有什么用处？"><a href="#8、什么是闭包？闭包有什么用处？" class="headerlink" title="8、什么是闭包？闭包有什么用处？"></a>8、什么是闭包？闭包有什么用处？</h2><pre><code>通俗的说，闭包就是作用域范围，因为js是函数作用域，所以函数就是闭包．全局函数的作用域范围就是全局，所以无须讨论．更多的应用其实是在内嵌函数，这就会涉及到内嵌作用域，或者叫作用域链。这就会带来另外一个问题，什么时候引用结束？如果不结束，就会一直占用内存，引起内存泄漏．不用的时候就引用设为空。    </code></pre><h2 id="9、defineProperty-hasOwnProperty-propertyIsEnumerable都是做什么用的？"><a href="#9、defineProperty-hasOwnProperty-propertyIsEnumerable都是做什么用的？" class="headerlink" title="9、defineProperty, hasOwnProperty, propertyIsEnumerable都是做什么用的？"></a>9、defineProperty, hasOwnProperty, propertyIsEnumerable都是做什么用的？</h2><pre><code>Object.defineProperty(obj, prop, descriptor)用来给对象定义属性,有value,writable,configurable,enumerable,set/get等.hasOwnProerty用于检查某一属性是不是存在于对象本身，继承来的</code></pre><p>父亲的属性不算．propertyIsEnumerable用来检测某一属性是否可遍历，也就是能不能用for..in循环来取到.</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><h2 id="10、js常用设计模式的实现思路，单例，工厂，代理，装饰，观察者模式等"><a href="#10、js常用设计模式的实现思路，单例，工厂，代理，装饰，观察者模式等" class="headerlink" title="10、js常用设计模式的实现思路，单例，工厂，代理，装饰，观察者模式等"></a>10、js常用设计模式的实现思路，单例，工厂，代理，装饰，观察者模式等</h2><h3 id="1-单例：-任意对象都是单例，无须特别处理"><a href="#1-单例：-任意对象都是单例，无须特别处理" class="headerlink" title="1) 单例：　任意对象都是单例，无须特别处理"></a>1) 单例：　任意对象都是单例，无须特别处理</h3><p><code>var obj = {name: &#39;michaelqin&#39;, age: 30};</code></p><h3 id="2-工厂-就是同样形式参数返回不同的实例"><a href="#2-工厂-就是同样形式参数返回不同的实例" class="headerlink" title="2) 工厂: 就是同样形式参数返回不同的实例"></a>2) 工厂: 就是同样形式参数返回不同的实例</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.name = <span class="string">'Person1'</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123; <span class="keyword">this</span>.name = <span class="string">'Animal1'</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Factory.prototype.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params">className</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">'new '</span> + className + <span class="string">'()'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> factory = <span class="keyword">new</span> Factory();</span><br><span class="line"><span class="keyword">var</span> obj1 = factory.getInstance(<span class="string">'Person'</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = factory.getInstance(<span class="string">'Animal'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj1.name); <span class="comment">// Person1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.name); <span class="comment">// Animal1</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="3-代理-就是新建个类调用老类的接口-包一下"><a href="#3-代理-就是新建个类调用老类的接口-包一下" class="headerlink" title="3) 代理: 就是新建个类调用老类的接口,包一下"></a>3) 代理: 就是新建个类调用老类的接口,包一下</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123; &#125;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'michaelqin'</span>); &#125;</span><br><span class="line">Person.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="number">30</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PersonProxy</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"><span class="keyword">this</span>.person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">this</span>.callMethod = <span class="function"><span class="keyword">function</span>(<span class="params">functionName</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'before proxy:'</span>, functionName);</span><br><span class="line">that.person[functionName](); <span class="comment">// 代理</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'after proxy:'</span>, functionName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pp = <span class="keyword">new</span> PersonProxy();</span><br><span class="line">pp.callMethod(<span class="string">'sayName'</span>); <span class="comment">// 代理调用Person的方法sayName()</span></span><br><span class="line">pp.callMethod(<span class="string">'sayAge'</span>); <span class="comment">// 代理调用Person的方法sayAge()</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="4-观察者-就是事件模式，比如按钮的onclick这样的应用"><a href="#4-观察者-就是事件模式，比如按钮的onclick这样的应用" class="headerlink" title="4) 观察者: 就是事件模式，比如按钮的onclick这样的应用."></a>4) 观察者: 就是事件模式，比如按钮的onclick这样的应用.</h3><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Publisher</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listeners = [];</span><br><span class="line">&#125;</span><br><span class="line">Publisher.prototype = &#123;</span><br><span class="line"><span class="string">'addListener'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listeners.push(listener);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="string">'removeListener'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>.listeners[listener];</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="string">'notify'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.listeners.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> listener = <span class="keyword">this</span>.listeners[i];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">listener.process(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;; <span class="comment">// 发布者</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Subscriber</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Subscriber.prototype = &#123;</span><br><span class="line"><span class="string">'process'</span>: <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;　<span class="comment">// 订阅者</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> publisher = <span class="keyword">new</span> Publisher();</span><br><span class="line">publisher.addListener(<span class="keyword">new</span> Subscriber());</span><br><span class="line">publisher.addListener(<span class="keyword">new</span> Subscriber());</span><br><span class="line">publisher.notify(&#123;<span class="attr">name</span>: <span class="string">'michaelqin'</span>, <span class="attr">ageo</span>: <span class="number">30</span>&#125;); <span class="comment">// 发布一个对象到所有订阅者</span></span><br><span class="line">publisher.notify(<span class="string">'2 subscribers will both perform process'</span>); <span class="comment">// 发布一个字符串到所有订阅者</span></span><br></pre></td></tr></table></figure></code></pre><h2 id="11、列举数组相关的常用方法"><a href="#11、列举数组相关的常用方法" class="headerlink" title="11、列举数组相关的常用方法"></a>11、列举数组相关的常用方法</h2><pre><code>push/pop, shift/unshift, split/join, slice/splice/concat, sort/reverse, map/reduce, forEach, filter</code></pre><h2 id="12、列举字符串相关的常用方法"><a href="#12、列举字符串相关的常用方法" class="headerlink" title="12、列举字符串相关的常用方法"></a>12、列举字符串相关的常用方法</h2><pre><code>indexOf/lastIndexOf/charAt, split/match/test, slice/substring/substr, toLowerCase/toUpperCase</code></pre><h1 id="node核心内置库类（事件，-流，-文件，-网络）"><a href="#node核心内置库类（事件，-流，-文件，-网络）" class="headerlink" title="node核心内置库类（事件， 流， 文件， 网络）"></a>node核心内置库类（事件， 流， 文件， 网络）</h1><h2 id="node概览："><a href="#node概览：" class="headerlink" title="node概览："></a>node概览：</h2><h2 id="1、node架构"><a href="#1、node架构" class="headerlink" title="1、node架构"></a>1、node架构</h2><pre><code>主要分为三层，应用app &gt;&gt; V8及node内置架构 &gt;&gt; 操作系统. V8是node运行的环境，可以理解为node虚拟机．</code></pre><p>node内置架构又可分为三层: 核心模块(javascript实现) &gt;&gt; c++绑定 &gt;&gt; libuv + CAes + http.</p><h2 id="2、node的核心模块"><a href="#2、node的核心模块" class="headerlink" title="2、node的核心模块"></a>2、node的核心模块</h2><pre><code>EventEmitter, Stream, FS, Net, 全局对象</code></pre><h2 id="node全局对象："><a href="#node全局对象：" class="headerlink" title="node全局对象："></a>node全局对象：</h2><h2 id="1、node有哪些全局对象？"><a href="#1、node有哪些全局对象？" class="headerlink" title="1、node有哪些全局对象？"></a>1、node有哪些全局对象？</h2><pre><code>process、 console、 Buffer</code></pre><h2 id="2、process有哪些方法？"><a href="#2、process有哪些方法？" class="headerlink" title="2、process有哪些方法？"></a>2、process有哪些方法？</h2><pre><code>process.stdin, process.stdout, process.stderr, process.on, process.env, process.argv, process.arch, process.platform, process.exit</code></pre><h2 id="3、console有哪些常用方法"><a href="#3、console有哪些常用方法" class="headerlink" title="3、console有哪些常用方法?"></a>3、console有哪些常用方法?</h2><pre><code>console.log/console.info, console.error/console.warning, console.time/console.timeEnd, console.trace, console.table</code></pre><h2 id="4、node有哪些定时功能"><a href="#4、node有哪些定时功能" class="headerlink" title="4、node有哪些定时功能?"></a>4、node有哪些定时功能?</h2><pre><code>setTimeout/clearTimeout, setInterval/clearInterval, setImmediate/clearImmediate, process.nextTick</code></pre><h2 id="5、node中的事件循环是什么样子的"><a href="#5、node中的事件循环是什么样子的" class="headerlink" title="5、node中的事件循环是什么样子的?"></a>5、node中的事件循环是什么样子的?</h2><pre><code>process.nextTick &gt;&gt; setImmidate &gt;&gt; setTimeout/SetInterval</code></pre><h2 id="6、node中的Buffer如何应用"><a href="#6、node中的Buffer如何应用" class="headerlink" title="6、node中的Buffer如何应用?"></a>6、node中的Buffer如何应用?</h2><pre><code>Buffer是用来处理二进制数据的，比如图片，mp3,数据库文件等.Buffer支持各种编码解码，二进制字符串互转</code></pre><h1 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter:"></a>EventEmitter:</h1><h2 id="1、什么是EventEmitter"><a href="#1、什么是EventEmitter" class="headerlink" title="1、什么是EventEmitter?"></a>1、什么是EventEmitter?</h2><pre><code>EventEmitter是node中一个实现观察者模式的类，主要功能是监听和发射消息，用于处理多模块交互问题.</code></pre><h2 id="2、如何实现一个EventEmitter"><a href="#2、如何实现一个EventEmitter" class="headerlink" title="2、如何实现一个EventEmitter?"></a>2、如何实现一个EventEmitter?</h2><p>主要分三步：定义一个子类， 调用构造函数， 继承EventEmitter<br>            <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>),</span><br><span class="line">    EventEmitter = <span class="built_in">require</span>(<span class="string">'event'</span>).EventEmitter;</span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyEmitter</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line">util.inherits(MyEmitter, EventEmitter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> em = <span class="keyword">new</span> MyEmitter();</span><br><span class="line"><span class="comment">//接受事件</span></span><br><span class="line">em.on(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'收到事件hello的数据：'</span>， data);</span><br><span class="line">&#125;);</span><br><span class="line">em.emit(<span class="string">'hello'</span>, <span class="string">'EventEmitter传递消息真方便'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="3、EventEmitter有哪些典型应用？"><a href="#3、EventEmitter有哪些典型应用？" class="headerlink" title="3、EventEmitter有哪些典型应用？"></a>3、EventEmitter有哪些典型应用？</h2><pre><code>模块之间传递消息回调函数内外传递消息处理流数据观察者模式发射触发机制</code></pre><h2 id="4、怎么捕获EventEmitter的错误事件？"><a href="#4、怎么捕获EventEmitter的错误事件？" class="headerlink" title="4、怎么捕获EventEmitter的错误事件？"></a>4、怎么捕获EventEmitter的错误事件？</h2><p>监听error事件即可，若有多个EventEmitter，可用domain来统一处理。<br>            <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> domain = <span class="built_in">require</span>(<span class="string">'domain'</span>);</span><br><span class="line"><span class="keyword">var</span> myDomain = domain.create();</span><br><span class="line"><span class="comment">//接受事件并打印</span></span><br><span class="line">myDomain.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'domain接受到的事件'</span>, err);</span><br><span class="line">&#125;);</span><br><span class="line">myDomain.run(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> emitter1 = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">emitter1.emit(<span class="string">'error'</span>, <span class="string">'错误事件来自emitter1'</span>);</span><br><span class="line"><span class="keyword">var</span> emitter2 = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">emitter2.emit(<span class="string">'error'</span>, <span class="string">'错误事件来自emitter2'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="5、EventEmitter中的newListenser事件有什么用处"><a href="#5、EventEmitter中的newListenser事件有什么用处" class="headerlink" title="5、EventEmitter中的newListenser事件有什么用处?"></a>5、EventEmitter中的newListenser事件有什么用处?</h2><p>newListener可以用来做事件机制的反射，特殊应用，事件管理等．当任何on事件添加到EventEmitter时，就会触发newListener事件，基于这种模式，我们可以做很多自定义处理.</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emitter3 = <span class="keyword">new</span> MyEmitter();</span><br><span class="line">emitter3.on(<span class="string">'newListener'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name, listener</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"新事件的名字:"</span>, name);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"新事件的代码:"</span>, listener);</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="built_in">console</span>.log(<span class="string">"我是自定义延时处理机制"</span>); &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">emitter3.on(<span class="string">'hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello　node'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></code></pre><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><pre><code>stream是基于事件EventEmitter的数据管理模式．由各种不同的抽象接口组成，主要包括可写，可读，可读写，可转换等几种类型．</code></pre><h2 id="1、Stream有什么好处？"><a href="#1、Stream有什么好处？" class="headerlink" title="1、Stream有什么好处？"></a>1、Stream有什么好处？</h2><pre><code>非阻塞式数据处理提升效率，片段处理节省内存，管道处理方便扩展</code></pre><h2 id="2、Stream有哪些典型应用？"><a href="#2、Stream有哪些典型应用？" class="headerlink" title="2、Stream有哪些典型应用？"></a>2、Stream有哪些典型应用？</h2><pre><code>文件处理、网络交换、数据转换、音视频处理</code></pre><h2 id="3、怎么捕获Stream的错误事件？"><a href="#3、怎么捕获Stream的错误事件？" class="headerlink" title="3、怎么捕获Stream的错误事件？"></a>3、怎么捕获Stream的错误事件？</h2><pre><code>监听error事件、方法同EventEmitter</code></pre><h2 id="4、哪些常用Stream，分别什么时候用？"><a href="#4、哪些常用Stream，分别什么时候用？" class="headerlink" title="4、哪些常用Stream，分别什么时候用？"></a>4、哪些常用Stream，分别什么时候用？</h2><pre><code>Readable为可被读流，在座位数据源时使用；Writeable为可被读流，在作为输出元时使用；Duplex为读写流，作为输入源接受被写入，同时又作为输入源被后面的流读出；Transform机制和Duplex一样，都是双向流，区别时Transfrom只需要实现一个函数_transfrom(chunk, encoding, callback);而Duplex需要分别实现_read(size)函数和_write(chunk, encoding, callback)函数.    </code></pre><h2 id="5、实现一个Writable-Stream"><a href="#5、实现一个Writable-Stream" class="headerlink" title="5、实现一个Writable Stream?"></a>5、实现一个Writable Stream?</h2><p>三步走:1)构造函数call Writable 2)　继承Writable 3) 实现_write(chunk, encoding, callback)函数</p><pre><code>```var Writeable = require(&apos;stream&apos;).Writable;var util = require(&apos;util&apos;);//构造函数function MyWriteable(options) {    Writeable.call(this, options);}//继承Writeableutil.inherits(MyWriteable, Writable);MyWritable.prototype._write = function(chunk, encoding, callback) {    // 此处可对写入的数据进行处理    console.log(&quot;被写入的数据是:&quot;, chunk.toString());     callback();};// stdin作为输入源，MyWritable作为输出源   process.stdin.pipe(new MyWritable()); ```            </code></pre><h1 id="node高级话题-异步，-部署，-性能调优，-异步调试"><a href="#node高级话题-异步，-部署，-性能调优，-异步调试" class="headerlink" title="node高级话题(异步， 部署， 性能调优， 异步调试)"></a>node高级话题(异步， 部署， 性能调优， 异步调试)</h1><h2 id="1、node中的异步与同步怎么理解？"><a href="#1、node中的异步与同步怎么理解？" class="headerlink" title="1、node中的异步与同步怎么理解？"></a>1、node中的异步与同步怎么理解？</h2><pre><code>node是单线程的，异步是通过一次次的事件循环来实现的。同步则是阻塞式的io，在高并发环境下会有很大的性能问题，所以同步一般只在基础框架的启动时使用，如：加载配置文件、初始化程序</code></pre><h2 id="2、哪些方法可以进行异步流程控制？"><a href="#2、哪些方法可以进行异步流程控制？" class="headerlink" title="2、哪些方法可以进行异步流程控制？"></a>2、哪些方法可以进行异步流程控制？</h2><pre><code>1）多层嵌套回调2）单独为回调写函数，函数里再回调3)第三方框架：async、q、promise</code></pre><h2 id="3、怎么绑定node程序到80端口？"><a href="#3、怎么绑定node程序到80端口？" class="headerlink" title="3、怎么绑定node程序到80端口？"></a>3、怎么绑定node程序到80端口？</h2><pre><code>1）sudo2）Apache/nginx代理3）操作系统的firewall iptables端口绑定4）第三方库up</code></pre><h2 id="4、有哪些方法可以让node程序遇到错误后自动重启"><a href="#4、有哪些方法可以让node程序遇到错误后自动重启" class="headerlink" title="4、有哪些方法可以让node程序遇到错误后自动重启?"></a>4、有哪些方法可以让node程序遇到错误后自动重启?</h2><pre><code>1) runit 2) forever 3) nohup npm start &amp;4）up -watch -port 80 server.js</code></pre><h2 id="5、怎么充分利用多个cpu？"><a href="#5、怎么充分利用多个cpu？" class="headerlink" title="5、怎么充分利用多个cpu？"></a>5、怎么充分利用多个cpu？</h2><pre><code>1个cpu运行一个node程序</code></pre><h2 id="6、怎样调节node执行单元的内存大小"><a href="#6、怎样调节node执行单元的内存大小" class="headerlink" title="6、怎样调节node执行单元的内存大小?"></a>6、怎样调节node执行单元的内存大小?</h2><pre><code>用--max-old-space-size 和 --max-new-space-size 来设置 v8 使用内存的上限</code></pre><h2 id="7、有哪些常用方法可以防止程序崩溃"><a href="#7、有哪些常用方法可以防止程序崩溃" class="headerlink" title="7、有哪些常用方法可以防止程序崩溃?"></a>7、有哪些常用方法可以防止程序崩溃?</h2><pre><code>1) try-catch-finally 2) EventEmitter/Stream error事件处理 3) domain统一控制 4) jshint静态检查 5) jasmine/mocha进行单元测试</code></pre><h2 id="8、怎样调试node程序"><a href="#8、怎样调试node程序" class="headerlink" title="8、怎样调试node程序?"></a>8、怎样调试node程序?</h2><pre><code>1) 监听错误事件req.on(&apos;error&apos;, function(){}), 适用EventEmitter存在的情况; 2) Promise.then.catch(error),适用Promise存在的情况 3) try-catch,适用async-await和js运行时异常，比如undefined object</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;node开发要点&quot;&gt;&lt;a href=&quot;#node开发要点&quot; class=&quot;headerlink&quot; title=&quot;node开发要点&quot;&gt;&lt;/a&gt;node开发要点&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1、常用前端技术：
    html5
    css3
    jQuer
      
    
    </summary>
    
      <category term="node笔记" scheme="https://zaizizaizai.github.io/categories/node%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="node" scheme="https://zaizizaizai.github.io/tags/node/"/>
    
      <category term="总结" scheme="https://zaizizaizai.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Immutable详解及React中实践</title>
    <link href="https://zaizizaizai.github.io/2017/12/17/Immutable%E8%AF%A6%E8%A7%A3%E5%8F%8AReact%E4%B8%AD%E5%AE%9E%E8%B7%B5/"/>
    <id>https://zaizizaizai.github.io/2017/12/17/Immutable详解及React中实践/</id>
    <published>2017-12-17T01:40:24.000Z</published>
    <updated>2017-12-17T02:09:54.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、js中数据可变状态"><a href="#1、js中数据可变状态" class="headerlink" title="1、js中数据可变状态"></a>1、js中数据可变状态</h1><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><pre><code>js中的对象一般是可变的，由于使用了引用赋值，新的对象简单的引用了原始的对象，改变的新对象将影响到原始对象。例如：    <figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo = &#123;a:<span class="number">1</span>&#125;<span class="comment">;</span></span><br><span class="line"><span class="keyword">bar </span>= foo<span class="comment">;</span></span><br><span class="line"><span class="keyword">bar.a </span>= <span class="number">2</span><span class="comment">;</span></span><br><span class="line">console.log(foor.a)<span class="comment">;//输出2</span></span><br></pre></td></tr></table></figure></code></pre><h3 id="优缺点："><a href="#优缺点：" class="headerlink" title="优缺点："></a>优缺点：</h3><pre><code>优点：节约内存缺点：当应用复杂后，会造成非常大的隐患</code></pre><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><pre><code>shallowCopy（浅拷贝），deepCopy（深拷贝）两种方法可将对象置为不可变对象，但同时也造成cpu和内存的浪费</code></pre><h1 id="2、Immutable-Data"><a href="#2、Immutable-Data" class="headerlink" title="2、Immutable.Data"></a>2、Immutable.Data</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1、js中数据可变状态&quot;&gt;&lt;a href=&quot;#1、js中数据可变状态&quot; class=&quot;headerlink&quot; title=&quot;1、js中数据可变状态&quot;&gt;&lt;/a&gt;1、js中数据可变状态&lt;/h1&gt;&lt;h3 id=&quot;概念：&quot;&gt;&lt;a href=&quot;#概念：&quot; class=&quot;he
      
    
    </summary>
    
      <category term="React笔记" scheme="https://zaizizaizai.github.io/categories/React%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Immutable" scheme="https://zaizizaizai.github.io/tags/Immutable/"/>
    
      <category term="React" scheme="https://zaizizaizai.github.io/tags/React/"/>
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>React笔记</title>
    <link href="https://zaizizaizai.github.io/2017/12/17/React%E7%AC%94%E8%AE%B0/"/>
    <id>https://zaizizaizai.github.io/2017/12/17/React笔记/</id>
    <published>2017-12-17T00:54:11.000Z</published>
    <updated>2018-02-25T12:25:52.363Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型-state-props"><a href="#数据类型-state-props" class="headerlink" title="数据类型  state/props"></a>数据类型  state/props</h1><p>  state—组件本身的数据<br>  props—从其他组件传入的组件</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>  getDefaultProps  //获得默认数据<br>  getInitialState  //设置State数据<br>  componentWillMount  //在component即将挂在到页面上时<br>  render<br>  componentDidMount  //ui真正挂载到文档流<br>  componentWillUnmount  //文件销毁</p><h1 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h1><p>  widget之间通过props通信<br>  子组件与父组件的通信<br>  事件订阅</p><h1 id="React-router"><a href="#React-router" class="headerlink" title="React-router"></a>React-router</h1><p>  url模式：<br>      browserHistory        //yoursite.com/a/b<br>      hashHistory        //yoursite.com/#a/b</p><p>  两种组件：（装载页面的组件）<br>         IndexRouter       //默认（没有存url）<br>         Router</p><p>  写法：<br>        &lt; Link to = “url”&gt;<br>  注释：<br>      页面切换时，组件会被销毁，再次进入时重新加载。若要实现某功能一直运行，不受页面切换的影响，则将该功<br>      能置于根节点上。</p><h1 id="事件订阅"><a href="#事件订阅" class="headerlink" title="事件订阅"></a>事件订阅</h1><p>  //TODO:完善整个概念</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型-state-props&quot;&gt;&lt;a href=&quot;#数据类型-state-props&quot; class=&quot;headerlink&quot; title=&quot;数据类型  state/props&quot;&gt;&lt;/a&gt;数据类型  state/props&lt;/h1&gt;&lt;p&gt;  state—组件本身
      
    
    </summary>
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="React" scheme="https://zaizizaizai.github.io/tags/React/"/>
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>webpack笔记</title>
    <link href="https://zaizizaizai.github.io/2017/12/13/webpack%E7%AC%94%E8%AE%B0/"/>
    <id>https://zaizizaizai.github.io/2017/12/13/webpack笔记/</id>
    <published>2017-12-13T04:37:18.000Z</published>
    <updated>2017-12-17T01:51:46.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="webpack使用中的错误："><a href="#webpack使用中的错误：" class="headerlink" title="webpack使用中的错误："></a>webpack使用中的错误：</h1><h2 id="1-npm-run-dev-出错"><a href="#1-npm-run-dev-出错" class="headerlink" title="1.npm run dev 出错"></a>1.npm run dev 出错</h2><h3 id="打包错误"><a href="#打包错误" class="headerlink" title="打包错误"></a>打包错误</h3><pre><code><figure class="highlight plain"><figcaption><span>in ./src/index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Module build failed: TypeError: fileSystem.statSync is not a function</span><br><span class="line">    at module.exports (/home/zaizizaizai/computerscience/project/react/ToDoList/node_modules/babel-loader/lib/utils/exists.js:7:25)</span><br><span class="line">    at find (/home/zaizizaizai/computerscience/project/react/ToDoList/node_modules/babel-loader/lib/resolve-rc.js:13:9)</span><br><span class="line">    at Object.module.exports (/home/zaizizaizai/computerscience/project/react/ToDoList/node_modules/babel-loader/lib/index.js:113:132)</span><br><span class="line"> @ multi main</span><br></pre></td></tr></table></figure></code></pre><h3 id="原因及解决方法："><a href="#原因及解决方法：" class="headerlink" title="原因及解决方法："></a>原因及解决方法：</h3><h3 id="babel-loader7-x版本与webpack1-x不兼容，将babel-loader版本降到6-x"><a href="#babel-loader7-x版本与webpack1-x不兼容，将babel-loader版本降到6-x" class="headerlink" title="babel-loader7.x版本与webpack1.x不兼容，将babel-loader版本降到6.x"></a>babel-loader7.x版本与webpack1.x不兼容，将babel-loader版本降到6.x</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;webpack使用中的错误：&quot;&gt;&lt;a href=&quot;#webpack使用中的错误：&quot; class=&quot;headerlink&quot; title=&quot;webpack使用中的错误：&quot;&gt;&lt;/a&gt;webpack使用中的错误：&lt;/h1&gt;&lt;h2 id=&quot;1-npm-run-dev-出错&quot;
      
    
    </summary>
    
      <category term="webpack笔记" scheme="https://zaizizaizai.github.io/categories/webpack%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://zaizizaizai.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="webpack" scheme="https://zaizizaizai.github.io/tags/webpack/"/>
    
  </entry>
  
</feed>
